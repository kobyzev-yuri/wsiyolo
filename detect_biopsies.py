#!/usr/bin/env python3
"""
üß¨ –ï–¥–∏–Ω—ã–π Pipeline –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∏–æ–ø—Å–∏–π –Ω–∞ WSI

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —è–≤–ª—è–µ—Ç—Å—è –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–ú —Å–ø–æ—Å–æ–±–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∏–æ–ø—Å–∏–π.
–û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ –º–µ—Ç–æ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

–ê–≤—Ç–æ—Ä: WSIYOLO Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import json
import argparse
from pathlib import Path
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import cv2
from skimage.measure import label, regionprops
from sklearn.cluster import KMeans

def create_wsi_thumbnail(wsi_path, thumbnail_size=(1024, 1024)):
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É WSI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        from cucim.clara import CuImage
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WSI
        wsi_data = CuImage(wsi_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        width = wsi_data.shape[1]
        height = wsi_data.shape[0]
        
        # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        target_level = 3
        if target_level >= wsi_data.num_levels:
            target_level = wsi_data.num_levels - 1
            
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
        thumbnail = wsi_data.read_region(
            location=(0, 0),
            size=(width // (2 ** target_level), height // (2 ** target_level)),
            level=target_level
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        thumbnail_array = thumbnail.numpy()
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –Ω—É–∂–Ω–æ–≥–æ
        thumbnail_resized = cv2.resize(thumbnail_array, thumbnail_size)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
        thumbnail_path = "wsi_thumbnail.jpg"
        cv2.imwrite(thumbnail_path, cv2.cvtColor(thumbnail_resized, cv2.COLOR_RGB2BGR))
        
        print(f"‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {thumbnail_path}")
        return thumbnail_path, thumbnail_resized
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
        return None, None

def detect_tissue_components(thumbnail_array):
    """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–∫–∞–Ω–∏ –Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–µ"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–∏
    hsv = cv2.cvtColor(thumbnail_array, cv2.COLOR_RGB2HSV)
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ç–∫–∞–Ω–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω)
    lower_tissue = np.array([0, 30, 30])
    upper_tissue = np.array([180, 255, 255])
    tissue_mask = cv2.inRange(hsv, lower_tissue, upper_tissue)
    
    # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    kernel = np.ones((5,5), np.uint8)
    tissue_mask = cv2.morphologyEx(tissue_mask, cv2.MORPH_CLOSE, kernel)
    tissue_mask = cv2.morphologyEx(tissue_mask, cv2.MORPH_OPEN, kernel)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    labeled_image = label(tissue_mask)
    regions = regionprops(labeled_image)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
    min_area = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    valid_regions = [r for r in regions if r.area >= min_area]
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(valid_regions)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∫–∞–Ω–∏")
    return valid_regions, tissue_mask

def cluster_biopsies(regions, n_clusters=6):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–∫–∞–Ω–∏ –≤ –±–∏–æ–ø—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é K-Means"""
    if len(regions) < n_clusters:
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {len(regions)} < {n_clusters}")
        return []
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    centroids = []
    for region in regions:
        centroids.append([region.centroid[1], region.centroid[0]])  # x, y
    
    centroids = np.array(centroids)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º K-Means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    cluster_labels = kmeans.fit_predict(centroids)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    biopsy_clusters = {}
    for i, (region, label) in enumerate(zip(regions, cluster_labels)):
        if label not in biopsy_clusters:
            biopsy_clusters[label] = []
        biopsy_clusters[label].append(region)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(biopsy_clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –±–∏–æ–ø—Å–∏–π")
    return biopsy_clusters

def create_biopsy_regions(biopsy_clusters, thumbnail_size):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –±–∏–æ–ø—Å–∏–π –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    biopsy_regions = []
    
    for cluster_id, regions in biopsy_clusters.items():
        if not regions:
            continue
            
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
        min_row = min(r.bbox[0] for r in regions)
        min_col = min(r.bbox[1] for r in regions)
        max_row = max(r.bbox[2] for r in regions)
        max_col = max(r.bbox[3] for r in regions)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –∫ WSI
        scale_x = 136192 / thumbnail_size[0]  # –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã WSI
        scale_y = 77312 / thumbnail_size[1]
        
        biopsy_region = {
            "id": cluster_id + 1,
            "name": f"–ë–∏–æ–ø—Ç–∞—Ç {cluster_id + 1}",
            "x_min": int(min_col * scale_x),
            "y_min": int(min_row * scale_y),
            "x_max": int(max_col * scale_x),
            "y_max": int(max_row * scale_y),
            "width": int((max_col - min_col) * scale_x),
            "height": int((max_row - min_row) * scale_y),
            "area": int((max_col - min_col) * (max_row - min_row) * scale_x * scale_y),
            "component_count": len(regions),
            "similarity": "identical"
        }
        
        biopsy_regions.append(biopsy_region)
    
    return biopsy_regions

def create_visualization(thumbnail_array, biopsy_regions, output_path="wsi_biopsies_detected.jpg"):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–æ–ø—Å–∏–π"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
    img = Image.fromarray(thumbnail_array)
    draw = ImageDraw.Draw(img)
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏–æ–ø—Å–∏–π
    colors = [
        (255, 0, 0),    # –ö—Ä–∞—Å–Ω—ã–π
        (0, 255, 0),    # –ó–µ–ª–µ–Ω—ã–π
        (0, 0, 255),    # –°–∏–Ω–∏–π
        (255, 255, 0),  # –ñ–µ–ª—Ç—ã–π
        (255, 0, 255),  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        (0, 255, 255),  # –ì–æ–ª—É–±–æ–π
    ]
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
    scale_x = 1024 / 136192
    scale_y = 1024 / 77312
    
    for i, biopsy in enumerate(biopsy_regions):
        color = colors[i % len(colors)]
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x1 = int(biopsy["x_min"] * scale_x)
        y1 = int(biopsy["y_min"] * scale_y)
        x2 = int(biopsy["x_max"] * scale_x)
        y2 = int(biopsy["y_max"] * scale_y)
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        draw.rectangle([x1, y1, x2, y2], outline=color, width=3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –±–∏–æ–ø—Å–∏–∏
        try:
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        except:
            font = ImageFont.load_default()
        
        draw.text((x1, y1-25), f"–ë–∏–æ–ø—Ç–∞—Ç {biopsy['id']}", fill=color, font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img.save(output_path)
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

def main():
    parser = argparse.ArgumentParser(description="–î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π –Ω–∞ WSI")
    parser.add_argument("--wsi-path", required=True, help="–ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É")
    parser.add_argument("--output-dir", default="biopsy_results", help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--n-biopsies", type=int, default=6, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –±–∏–æ–ø—Å–∏–π")
    parser.add_argument("--thumbnail-size", nargs=2, type=int, default=[1024, 1024], help="–†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã")
    
    args = parser.parse_args()
    
    print("üß¨ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∏–æ–ø—Å–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(args.output_dir, exist_ok=True)
    
    # 1. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É WSI
    print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã WSI...")
    thumbnail_path, thumbnail_array = create_wsi_thumbnail(args.wsi_path, tuple(args.thumbnail_size))
    
    if thumbnail_array is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É")
        return False
    
    # 2. –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–∫–∞–Ω–∏
    print("üîç –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∫–∞–Ω–∏...")
    regions, tissue_mask = detect_tissue_components(thumbnail_array)
    
    if len(regions) < args.n_biopsies:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(regions)} < {args.n_biopsies}")
        return False
    
    # 3. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –≤ –±–∏–æ–ø—Å–∏–∏
    print(f"üéØ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤ {args.n_biopsies} –±–∏–æ–ø—Å–∏–π...")
    biopsy_clusters = cluster_biopsies(regions, args.n_biopsies)
    
    if not biopsy_clusters:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –±–∏–æ–ø—Å–∏–π")
        return False
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –±–∏–æ–ø—Å–∏–π
    print("üìê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –±–∏–æ–ø—Å–∏–π...")
    biopsy_regions = create_biopsy_regions(biopsy_clusters, tuple(args.thumbnail_size))
    
    # 5. –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    create_visualization(thumbnail_array, biopsy_regions, 
                         os.path.join(args.output_dir, "wsi_biopsies_detected.jpg"))
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "biopsy_detection": {
            "method": "component_analysis_kmeans",
            "biopsy_count": len(biopsy_regions),
            "biopsy_regions": biopsy_regions,
            "wsi_info": {
                "path": args.wsi_path,
                "thumbnail_size": args.thumbnail_size
            }
        }
    }
    
    results_path = os.path.join(args.output_dir, "biopsy_detection_results.json")
    with open(results_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_path}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(biopsy_regions)} –±–∏–æ–ø—Å–∏–π")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
