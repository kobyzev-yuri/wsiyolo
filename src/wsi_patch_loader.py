"""
WSI Patch Loader —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MONAI GridPatchd.
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—á–∏ –∏–∑ WSI —Å –æ—Ç—Å–µ–≤–æ–º –ø—É—Å—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π.
"""

import numpy as np
from typing import List, Tuple, Optional
from monai.data import CuCIMWSIReader
from monai.transforms import Compose, LoadImaged, EnsureChannelFirstd, GridPatchd
import torch

from .data_structures import PatchInfo, WSIInfo, Coords


class WSIPatchLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–∞—Ç—á–µ–π –∏–∑ WSI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MONAI GridPatchd"""
    
    def __init__(self, tile_size: int = 512, overlap_ratio: float = 0.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        
        Args:
            tile_size: –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞
            overlap_ratio: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è (0.5 = 50% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ)
        """
        self.tile_size = tile_size
        self.overlap_ratio = overlap_ratio
        self.step_size = int(tile_size * (1 - overlap_ratio))
        
        # –°–æ–∑–¥–∞–µ–º transforms –¥–ª—è MONAI
        self.transforms = Compose([
            LoadImaged(keys=["image"], reader=CuCIMWSIReader, level=0),
            EnsureChannelFirstd(keys=["image"]),
            GridPatchd(
                keys=["image"],
                patch_size=(tile_size, tile_size),
                threshold=0.999 * 3 * 255 * tile_size * tile_size,
                pad_mode=None,
                constant_values=255,
            )
        ])
    
    def load_wsi_info(self, wsi_path: str) -> WSIInfo:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WSI
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            
        Returns:
            WSIInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSI
        """
        try:
            # –°–æ–∑–¥–∞–µ–º reader –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            reader = CuCIMWSIReader(level=0)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WSI
            wsi = reader.read(wsi_path)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            if hasattr(wsi, 'shape'):
                height, width = wsi.shape[:2]
            else:
                # Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                small_patch = reader.get_data(wsi_path, size=(100, 100))[0]
                height, width = small_patch.shape[:2]
                # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                height *= 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                width *= 10
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
            try:
                levels = wsi.resolutions["level_count"] if hasattr(wsi, 'resolutions') else 1
            except:
                levels = 1
            
            # –ü–æ–ª—É—á–∞–µ–º MPP
            try:
                mpp = wsi.metadata.get('mpp', None) if hasattr(wsi, 'metadata') else None
            except:
                mpp = None
            
            return WSIInfo(
                path=wsi_path,
                width=width,
                height=height,
                levels=levels,
                level_downsamples=[1.0],
                mpp=mpp
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WSI: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return WSIInfo(
                path=wsi_path,
                width=0,
                height=0,
                levels=1,
                level_downsamples=[1.0],
                mpp=None
            )
    
    def extract_patches(self, wsi_path: str) -> List[PatchInfo]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—á–∏ –∏–∑ WSI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GridPatchd
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            
        Returns:
            List[PatchInfo]: –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∏–∑ WSI: {wsi_path}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è transforms
            data = {"image": wsi_path}
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º transforms
            result = self.transforms(data)
            
            patches = []
            patch_id = 0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if "image" in result:
                patches_array = result["image"]
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ç—á–µ–π
                if "image_location" in result:
                    locations = result["image_location"]
                    
                    for i, (patch_img, location) in enumerate(zip(patches_array, locations)):
                        # location —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ç—á–∞
                        x, y = location[0], location[1]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ WSI
                        
                        # –°–æ–∑–¥–∞–µ–º PatchInfo
                        patch_info = PatchInfo(
                            patch_id=patch_id,
                            x=x,
                            y=y,
                            size=self.tile_size,
                            image=patch_img,
                            has_tissue=True  # GridPatchd —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –ø—É—Å—Ç—ã–µ –ø–∞—Ç—á–∏
                        )
                        
                        patches.append(patch_info)
                        patch_id += 1
                
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ç—á–µ–π: {len(patches)}")
            else:
                print("‚ö†Ô∏è  –ü–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
            return patches
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π: {e}")
            return []
    
    def extract_patches_manual(self, wsi_path: str) -> List[PatchInfo]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π –≤—Ä—É—á–Ω—É—é —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            
        Returns:
            List[PatchInfo]: –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        print(f"üîç –†—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∏–∑ WSI: {wsi_path}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º WSI
            reader = CuCIMWSIReader(level=0)
            img_array, metadata = reader.get_data(wsi_path)
            
            patches = []
            patch_id = 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∞—Ç—á–µ–π —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            height, width = img_array.shape[:2]
            
            print(f"üìä –†–∞–∑–º–µ—Ä WSI: {width}x{height}")
            print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: tile_size={self.tile_size}, step_size={self.step_size}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            for y in range(0, height - self.tile_size + 1, self.step_size):
                for x in range(0, width - self.tile_size + 1, self.step_size):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á
                    patch_img = img_array[y:y+self.tile_size, x:x+self.tile_size]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ç—á —Ç–∫–∞–Ω—å
                    has_tissue = self._has_tissue(patch_img)
                    
                    if has_tissue:
                        patch_info = PatchInfo(
                            patch_id=patch_id,
                            x=x,
                            y=y,
                            size=self.tile_size,
                            image=patch_img,
                            has_tissue=True
                        )
                        patches.append(patch_info)
                        patch_id += 1
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ç—á–µ–π —Å —Ç–∫–∞–Ω—å—é: {len(patches)}")
            return patches
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π: {e}")
            return []
    
    def _has_tissue(self, patch: np.ndarray) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∫–∞–Ω–∏ –≤ –ø–∞—Ç—á–µ
        
        Args:
            patch: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ç—á–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∫–∞–Ω—å
        """
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –º–µ–Ω—å—à–µ 240, —Ç–æ –µ—Å—Ç—å —Ç–∫–∞–Ω—å
        if len(patch.shape) == 3:
            mean_brightness = np.mean(patch)
        else:
            mean_brightness = np.mean(patch)
        
        return mean_brightness < 240  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–∏
    
    def get_patch_coordinates(self, wsi_info: WSIInfo) -> List[Tuple[int, int]]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –ø–∞—Ç—á–µ–π –≤ WSI
        
        Args:
            wsi_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSI
            
        Returns:
            List[Tuple[int, int]]: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (x, y) –ø–∞—Ç—á–µ–π
        """
        coordinates = []
        
        for y in range(0, wsi_info.height - self.tile_size + 1, self.step_size):
            for x in range(0, wsi_info.width - self.tile_size + 1, self.step_size):
                coordinates.append((x, y))
        
        return coordinates
    
    def save_patch(self, patch_info: PatchInfo, output_path: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ç—á –≤ —Ñ–∞–π–ª
        
        Args:
            patch_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ç—á–µ
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            import cv2
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if len(patch_info.image.shape) == 3:
                # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_to_save = cv2.cvtColor(patch_info.image, cv2.COLOR_RGB2BGR)
            else:
                # Grayscale
                img_to_save = patch_info.image
            
            cv2.imwrite(output_path, img_to_save)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}")
