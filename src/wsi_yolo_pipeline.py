"""
–ü–æ–ª–Ω—ã–π WSI YOLO Pipeline.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç patch loader, YOLO inference –∏ polygon merging.
"""

import os
import json
from typing import List, Dict, Any
from pathlib import Path
import time
from tqdm import tqdm

from data_structures import Model, WSIInfo, Prediction
from simple_patch_loader import SimplePatchLoader
from yolo_inference import YOLOInference
from polygon_merger import PolygonMerger


class WSIYOLOPipeline:
    """–ü–æ–ª–Ω—ã–π pipeline –¥–ª—è WSI YOLO –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, models_config: List[Dict[str, Any]], 
                 tile_size: int = 512, 
                 overlap_ratio: float = 0.5,
                 iou_threshold: float = 0.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline
        
        Args:
            models_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
            tile_size: –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞
            overlap_ratio: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            iou_threshold: –ü–æ—Ä–æ–≥ IoU –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        self.tile_size = tile_size
        self.overlap_ratio = overlap_ratio
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
        self.models = [Model(**config) for config in models_config]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.patch_loader = SimplePatchLoader(tile_size, overlap_ratio)
        self.yolo_inference = YOLOInference(self.models)
        self.polygon_merger = PolygonMerger(iou_threshold)
        
        print(f"‚úÖ WSI YOLO Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞: {tile_size}x{tile_size}")
        print(f"   –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap_ratio*100:.1f}%")
        print(f"   –ú–æ–¥–µ–ª–∏: {len(self.models)}")
    
    def process_wsi(self, wsi_path: str, output_path: str = None, max_patches: int = None) -> List[Prediction]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WSI —Ñ–∞–π–ª
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            max_patches: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            List[Prediction]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        """
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ WSI: {wsi_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(wsi_path):
            raise FileNotFoundError(f"WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_path}")
        
        start_time = time.time()
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WSI
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ WSI...")
        wsi_info = self.patch_loader.load_wsi_info(wsi_path)
        print(f"   –†–∞–∑–º–µ—Ä: {wsi_info.width}x{wsi_info.height}")
        print(f"   –£—Ä–æ–≤–Ω–∏: {wsi_info.levels}")
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏
        print("üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π...")
        patches = self.patch_loader.extract_patches(wsi_path, max_patches)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—á–µ–π: {len(patches)}")
        
        if not patches:
            print("‚ö†Ô∏è  –ü–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –≤ extract_patches
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ YOLO –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
        all_predictions = []
        
        for patch in tqdm(patches, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—á–µ–π"):
            try:
                predictions = self.yolo_inference.predict_patch(patch)
                all_predictions.extend(predictions)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—á–∞ {patch.patch_id}: {e}")
                continue
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(all_predictions)}")
        
        # 4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ excl)
        if all_predictions:
            print("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
            filtered_predictions = self._filter_predictions(all_predictions)
            print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_predictions)}")
            
            # 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if filtered_predictions:
                print("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
                merged_predictions = self.polygon_merger.merge_predictions(filtered_predictions)
                print(f"   –ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(merged_predictions)}")
            else:
                merged_predictions = []
        else:
            merged_predictions = []
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if output_path:
            self._save_predictions(merged_predictions, output_path, wsi_info)
        
        processing_time = time.time() - start_time
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
        
        return merged_predictions
    
    def _filter_predictions(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–∞—Ç—á–∏ —Å —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–æ–º 'excl'
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if not predictions:
            return []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –ø–∞—Ç—á–∞–º (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
        patch_predictions = {}
        
        for pred in predictions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–∞—Ç—á–∞–º
            patch_key = (int(pred.box.start.x // 512), int(pred.box.start.y // 512))
            
            if patch_key not in patch_predictions:
                patch_predictions[patch_key] = []
            patch_predictions[patch_key].append(pred)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ç—á–∏
        filtered_predictions = []
        
        for patch_key, patch_preds in patch_predictions.items():
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤ —ç—Ç–æ–º –ø–∞—Ç—á–µ
            classes_in_patch = set(pred.class_name for pred in patch_preds)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ 'excl' - –∏—Å–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –ø–∞—Ç—á
            if classes_in_patch == {'excl'}:
                print(f"   –ò—Å–∫–ª—é—á–µ–Ω –ø–∞—Ç—á {patch_key}: —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω (excl)")
                continue
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞—Å—Å—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ç—á–∞
            filtered_predictions.extend(patch_preds)
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–∞—Ç—á {patch_key}: –∫–ª–∞—Å—Å—ã {classes_in_patch}")
        
        return filtered_predictions
    
    def _save_predictions(self, predictions: List[Prediction], 
                         output_path: str, wsi_info: WSIInfo):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            wsi_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSI
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        results = {
            'wsi_info': {
                'path': wsi_info.path,
                'width': wsi_info.width,
                'height': wsi_info.height,
                'levels': wsi_info.levels,
                'mpp': wsi_info.mpp
            },
            'predictions': []
        }
        
        for pred in predictions:
            pred_data = {
                'class_name': pred.class_name,
                'confidence': pred.conf,
                'box': {
                    'start': {'x': pred.box.start.x, 'y': pred.box.start.y},
                    'end': {'x': pred.box.end.x, 'y': pred.box.end.y}
                }
            }
            
            if pred.polygon:
                pred_data['polygon'] = [
                    {'x': p.x, 'y': p.y} for p in pred.polygon
                ]
            
            results['predictions'].append(pred_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    
    def get_statistics(self, predictions: List[Prediction]) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if not predictions:
            return {'total': 0, 'by_class': {}}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_counts = {}
        total_confidence = 0
        
        for pred in predictions:
            class_name = pred.class_name
            if class_name not in class_counts:
                class_counts[class_name] = 0
            class_counts[class_name] += 1
            total_confidence += pred.conf
        
        avg_confidence = total_confidence / len(predictions)
        
        return {
            'total': len(predictions),
            'by_class': class_counts,
            'average_confidence': avg_confidence
        }


def create_models_config(models_dir: str) -> List[Dict[str, Any]]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        models_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–æ–¥–µ–ª—è–º–∏
        
    Returns:
        List[Dict]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    """
    models_config = []
    models_path = Path(models_dir)
    
    if not models_path.exists():
        raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
    
    # –ò—â–µ–º .pt —Ñ–∞–π–ª—ã
    for model_file in models_path.glob("*.pt"):
        model_name = model_file.stem
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if "lp" in model_name.lower():
            window_size = 512
            min_conf = 0.5
        elif "mild" in model_name.lower():
            window_size = 512
            min_conf = 0.6
        elif "moderate" in model_name.lower():
            window_size = 512
            min_conf = 0.7
        else:
            window_size = 512
            min_conf = 0.5
        
        models_config.append({
            'model_path': str(model_file),
            'window_size': window_size,
            'min_conf': min_conf
        })
    
    return models_config


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pipeline"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    models_dir = "models"
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    output_path = "results/predictions.json"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        models_config = create_models_config(models_dir)
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_config)}")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = WSIYOLOPipeline(
            models_config=models_config,
            tile_size=512,
            overlap_ratio=0.5,
            iou_threshold=0.5
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WSI (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        predictions = pipeline.process_wsi(wsi_path, output_path, max_patches=10)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = pipeline.get_statistics(predictions)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['total']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['average_confidence']:.3f}")
        print(f"   –ü–æ –∫–ª–∞—Å—Å–∞–º: {stats['by_class']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
