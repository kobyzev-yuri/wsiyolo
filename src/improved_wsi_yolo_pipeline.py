#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π WSI YOLO Pipeline —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:
- –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–ª–æ—â–∞–¥–∏
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import os
import json
import time
import numpy as np
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import torch
from ultralytics import YOLO
from monai.data import CuCIMWSIReader
from monai.transforms import Compose, LoadImaged, EnsureChannelFirstd
import concurrent.futures
from shapely.geometry import Polygon
from dataclasses import asdict

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from data_structures import PatchInfo, Prediction, Model, Coords, Box
from yolo_inference import YOLOInference
from improved_polygon_merger import ImprovedPolygonMerger
from adaptive_polygon_simplifier import AdaptivePolygonSimplifier

class ImprovedWSIYOLOPipeline:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π WSI YOLO Pipeline —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, 
                 model_paths: Dict[str, str],
                 patch_size: int = 512,
                 overlap: int = 0,
                 batch_size: int = 32,
                 max_workers: int = 4,
                 device: str = "cuda" if torch.cuda.is_available() else "cpu"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline
        
        Args:
            model_paths: –°–ª–æ–≤–∞—Ä—å –ø—É—Ç–µ–π –∫ –º–æ–¥–µ–ª—è–º {class_name: model_path}
            patch_size: –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞
            overlap: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É –ø–∞—Ç—á–∞–º–∏
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        """
        self.model_paths = model_paths
        self.patch_size = patch_size
        self.overlap = overlap
        self.batch_size = batch_size
        self.max_workers = max_workers
        self.device = device
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.models = {}
        self.polygon_merger = ImprovedPolygonMerger()
        self.polygon_simplifier = AdaptivePolygonSimplifier()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self._load_models()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'total_patches': 0,
            'total_predictions': 0,
            'processing_time': 0,
            'inference_time': 0,
            'merging_time': 0,
            'simplification_time': 0
        }
    
    def _load_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        for class_name, model_path in self.model_paths.items():
            if os.path.exists(model_path):
                try:
                    model = YOLO(model_path)
                    self.models[class_name] = model
                    print(f"   ‚úÖ {class_name}: {model_path}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {class_name}: {e}")
            else:
                print(f"   ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
    
    def process_wsi(self, wsi_path: str, output_dir: str = "results") -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WSI —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º pipeline
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        start_time = time.time()
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ WSI YOLO Pipeline")
        print(f"   WSI: {wsi_path}")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        print(f"   –ë–∞—Ç—á —Ä–∞–∑–º–µ—Ä: {self.batch_size}")
        print(f"   –ü–æ—Ç–æ–∫–æ–≤: {self.max_workers}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs(output_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WSI
        wsi_info = self._load_wsi(wsi_path)
        if not wsi_info:
            return {'error': 'Failed to load WSI'}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏
        patches = self._extract_patches(wsi_info)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(patches)} –ø–∞—Ç—á–µ–π")
        
        # –ë–∞—Ç—á–∏–Ω–≥ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        all_predictions = self._batch_inference(patches)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(all_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        merged_predictions = self._improved_merge_predictions(all_predictions)
        print(f"üîó –ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(merged_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        final_predictions = self._adaptive_simplify_predictions(merged_predictions)
        print(f"‚úÇÔ∏è  –ü–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è: {len(final_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = self._save_results(wsi_info, final_predictions, output_dir)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_time = time.time() - start_time
        self.performance_stats.update({
            'total_patches': len(patches),
            'total_predictions': len(final_predictions),
            'processing_time': total_time
        })
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f}—Å")
        self._print_performance_stats()
        
        return results
    
    def _load_wsi(self, wsi_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç WSI —Ñ–∞–π–ª"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é CuCIMWSIReader
            reader = CuCIMWSIReader()
            wsi_data = reader.read(wsi_path)
            
            # CuImage –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            width = wsi_data.shape[1]  # —à–∏—Ä–∏–Ω–∞
            height = wsi_data.shape[0]  # –≤—ã—Å–æ—Ç–∞
            levels = wsi_data.num_levels if hasattr(wsi_data, 'num_levels') else 1
            
            return {
                'path': wsi_path,
                'width': width,
                'height': height,
                'levels': levels,
                'mpp': None,  # MPP –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                'reader': reader,
                'wsi_data': wsi_data
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WSI: {e}")
            return None
    
    def _extract_patches(self, wsi_info: Dict[str, Any]) -> List[PatchInfo]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—á–∏ –∏–∑ WSI"""
        patches = []
        wsi_data = wsi_info['wsi_data']
        width = wsi_info['width']
        height = wsi_info['height']
        
        print(f"   üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π: WSI {width}x{height}, –ø–∞—Ç—á {self.patch_size}x{self.patch_size}")
        
        patch_count = 0
        total_possible_patches = ((width - self.patch_size) // (self.patch_size - self.overlap) + 1) * ((height - self.patch_size) // (self.patch_size - self.overlap) + 1)
        print(f"   üìà –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ç—á–µ–π: {total_possible_patches}")
        
        for y in range(0, height - self.patch_size + 1, self.patch_size - self.overlap):
            for x in range(0, width - self.patch_size + 1, self.patch_size - self.overlap):
                    
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á –∏—Å–ø–æ–ª—å–∑—É—è CuImage API
                    patch_data = wsi_data.read_region(
                        location=(x, y),
                        size=(self.patch_size, self.patch_size),
                        level=0
                    )
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if hasattr(patch_data, 'numpy'):
                        patch_array = patch_data.numpy()
                    else:
                        patch_array = np.array(patch_data)
                    
                    if patch_array is not None and patch_array.shape[:2] == (self.patch_size, self.patch_size):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ç—á —Ç–∫–∞–Ω—å (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º pipeline)
                        if self._has_tissue(patch_array):
                            patch_info = PatchInfo(
                                patch_id=patch_count,
                                x=x,
                                y=y,
                                size=self.patch_size,
                                image=patch_array
                            )
                            patches.append(patch_info)
                            patch_count += 1
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–∞ ({x}, {y}): {e}")
                    continue
        
        return patches
    
    def _has_tissue(self, patch_array: np.ndarray) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ç—á —Ç–∫–∞–Ω—å (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ pipeline)"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if len(patch_array.shape) == 3 and patch_array.shape[2] == 3:
                import cv2
                hsv = cv2.cvtColor(patch_array, cv2.COLOR_RGB2HSV)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (S –∫–∞–Ω–∞–ª)
                saturation = hsv[:, :, 1]
                
                # –ü–æ—Ä–æ–≥ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–∏
                tissue_threshold = 30
                tissue_pixels = np.sum(saturation > tissue_threshold)
                total_pixels = saturation.size
                
                # –ï—Å–ª–∏ –±–æ–ª–µ–µ 10% –ø–∏–∫—Å–µ–ª–µ–π –∏–º–µ—é—Ç –≤—ã—Å–æ–∫—É—é –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ç–∫–∞–Ω—å—é
                tissue_ratio = tissue_pixels / total_pixels
                return tissue_ratio > 0.1
            else:
                # –ï—Å–ª–∏ –Ω–µ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∫–∞–Ω—å
                return True
                
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∫–∞–Ω—å
            return True
    
    def _batch_inference(self, patches: List[PatchInfo]) -> List[Prediction]:
        """–ë–∞—Ç—á–∏–Ω–≥ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üîç –ó–∞–ø—É—Å–∫ –±–∞—Ç—á–∏–Ω–≥ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
        start_time = time.time()
        
        all_predictions = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ç—á–∏ –ø–æ –±–∞—Ç—á–∞–º
        patch_batches = [patches[i:i + self.batch_size] for i in range(0, len(patches), self.batch_size)]
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            model_tasks = {}
            for model_name, model in self.models.items():
                future = executor.submit(self._process_model_batches, model_name, model, patch_batches)
                model_tasks[model_name] = future
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for model_name, future in model_tasks.items():
                try:
                    model_predictions = future.result()
                    all_predictions.extend(model_predictions)
                    print(f"   ‚úÖ {model_name}: {len(model_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ {model_name}: {e}")
        
        inference_time = time.time() - start_time
        self.performance_stats['inference_time'] = inference_time
        
        print(f"‚è±Ô∏è  –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {inference_time:.2f}—Å")
        return all_predictions
    
    def _process_model_batches(self, model_name: str, model: YOLO, patch_batches: List[List[PatchInfo]]) -> List[Prediction]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á–∏ –ø–∞—Ç—á–µ–π –¥–ª—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        predictions = []
        
        for batch_idx, patch_batch in enumerate(patch_batches):
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                batch_images = []
                batch_patches = []
                
                for patch in patch_batch:
                    if patch.image is not None:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è YOLO
                        image = patch.image.astype(np.uint8)
                        if len(image.shape) == 3 and image.shape[2] == 3:
                            batch_images.append(image)
                            batch_patches.append(patch)
                
                if not batch_images:
                    continue
                
                # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –±–∞—Ç—á–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º confidence threshold
                results = model(batch_images, verbose=False, conf=0.7, iou=0.7)
                
                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å GPU –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for i, result in enumerate(results):
                    if i < len(batch_patches):
                        patch = batch_patches[i]
                        patch_predictions = self._process_yolo_result(
                            result, patch, model_name
                        )
                        predictions.extend(patch_predictions)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {batch_idx} –¥–ª—è {model_name}: {e}")
                continue
        
        return predictions
    
    def _process_yolo_result(self, result, patch: PatchInfo, model_name: str) -> List[Prediction]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç YOLO –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
        predictions = []
        
        try:
            if result.boxes is not None and len(result.boxes) > 0:
                boxes = result.boxes
                
                for i in range(len(boxes)):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ box
                    box = boxes.xyxy[i].cpu().numpy()  # [x1, y1, x2, y2]
                    conf = boxes.conf[i].cpu().numpy()
                    cls = int(boxes.cls[i].cpu().numpy())
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
                    class_name = result.names[cls]
                    
                    # –°–æ–∑–¥–∞–µ–º Box –æ–±—ä–µ–∫—Ç
                    box_obj = Box(
                        start=Coords(x=float(box[0]), y=float(box[1])),
                        end=Coords(x=float(box[2]), y=float(box[3]))
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –º–∞—Å–∫–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º pipeline)
                    polygon = self._create_polygon_from_mask(result, i, patch)
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –æ–±—ä–µ–∫—Ç–∞
                    box_width = box[2] - box[0]
                    box_height = box[3] - box[1]
                    box_area = box_width * box_height
                    
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
                    min_area = 100  # –ú–∏–Ω–∏–º—É–º 10x10 –ø–∏–∫—Å–µ–ª–µ–π
                    max_area = 50000  # –ú–∞–∫—Å–∏–º—É–º 224x224 –ø–∏–∫—Å–µ–ª–µ–π
                    
                    if min_area <= box_area <= max_area:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                        prediction = Prediction(
                            class_name=class_name,
                            box=box_obj,
                            conf=float(conf),
                            polygon=polygon
                        )
                        
                        predictions.append(prediction)
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                        if len(predictions) < 10:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            print(f"   üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç {class_name}: —Ä–∞–∑–º–µ—Ä {box_area:.0f} (conf={conf:.3f})")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ YOLO: {e}")
        
        return predictions
    
    def _create_polygon_from_mask(self, result, box_idx: int, patch: PatchInfo) -> Optional[List[Coords]]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –º–∞—Å–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ pipeline)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if hasattr(result, 'masks') and result.masks is not None and len(result.masks) > box_idx:
                mask = result.masks.data[box_idx].cpu().numpy()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É –≤ –ø–æ–ª–∏–≥–æ–Ω
                from skimage import measure
                contours = measure.find_contours(mask, 0.5)
                
                if contours:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç—É—Ä
                    largest_contour = max(contours, key=len)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    polygon_coords = []
                    for point in largest_contour:
                        # YOLO –º–∞—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (height, width), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ (x, y)
                        x = point[1] + patch.x  # –ê–±—Å–æ–ª—é—Ç–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
                        y = point[0] + patch.y  # –ê–±—Å–æ–ª—é—Ç–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
                        polygon_coords.append(Coords(x=float(x), y=float(y)))
                    
                    return polygon_coords
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
            
        return None
    
    def _improved_merge_predictions(self, predictions: List[Prediction]) -> List[Prediction]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        print("üîó –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        start_time = time.time()
        
        try:
            merged_predictions = self.polygon_merger.merge_predictions(predictions)
            merging_time = time.time() - start_time
            self.performance_stats['merging_time'] = merging_time
            
            print(f"   ‚è±Ô∏è  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {merging_time:.2f}—Å")
            return merged_predictions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return predictions
    
    def _adaptive_simplify_predictions(self, predictions: List[Prediction]) -> List[Prediction]:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
        print("‚úÇÔ∏è  –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤...")
        start_time = time.time()
        
        simplified_predictions = []
        
        for pred in predictions:
            try:
                if pred.polygon and len(pred.polygon) > 3:
                    # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
                    coords = [(p.x, p.y) for p in pred.polygon]
                    polygon = Polygon(coords)
                    
                    if polygon.is_valid:
                        original_points = len(pred.polygon)
                        
                        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
                        simplified_polygon, metrics = self.polygon_simplifier.simplify_polygon(polygon)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
                        if simplified_polygon.is_valid:
                            simplified_coords = list(simplified_polygon.exterior.coords)
                            pred.polygon = [Coords(x=float(x), y=float(y)) for x, y in simplified_coords]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                            pred.simplification_metrics = {
                                'original_points': metrics['original_points'],
                                'simplified_points': metrics['simplified_points'],
                                'area_preserved': metrics['area_preserved'],
                                'method': metrics['method']
                            }
                            
                            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                            if len(simplified_predictions) < 5:
                                print(f"   üîç –ü–æ–ª–∏–≥–æ–Ω {len(simplified_predictions)}: {original_points} ‚Üí {len(simplified_coords)} —Ç–æ—á–µ–∫, –º–µ—Ç–æ–¥: {metrics['method']}")
                        else:
                            # –ï—Å–ª–∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            pred.simplification_metrics = {
                                'original_points': original_points,
                                'simplified_points': original_points,
                                'area_preserved': 1.0,
                                'method': 'no_simplification_needed'
                            }
                
                simplified_predictions.append(pred)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
                simplified_predictions.append(pred)
        
        simplification_time = time.time() - start_time
        self.performance_stats['simplification_time'] = simplification_time
        
        print(f"   ‚è±Ô∏è  –£–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {simplification_time:.2f}—Å")
        return simplified_predictions
    
    def _save_results(self, wsi_info: Dict[str, Any], predictions: List[Prediction], output_dir: str) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        results = {
            'wsi_info': {
                'path': wsi_info['path'],
                'width': wsi_info['width'],
                'height': wsi_info['height'],
                'levels': wsi_info['levels'],
                'mpp': wsi_info['mpp']
            },
            'predictions': [],
            'performance_stats': self.performance_stats,
            'pipeline_version': 'improved_v1.0'
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        for pred in predictions:
            pred_dict = {
                'class_name': pred.class_name,
                'confidence': pred.conf,
                'box': asdict(pred.box),
                'polygon': [asdict(coord) for coord in pred.polygon] if pred.polygon else None
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(pred, 'simplification_metrics'):
                pred_dict['simplification_metrics'] = pred.simplification_metrics
            
            results['predictions'].append(pred_dict)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        output_path = os.path.join(output_dir, 'improved_predictions.json')
        with open(output_path, 'w') as f:
            json.dump(results, f, indent=2)
        
        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
        return results
    
    def _print_performance_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.performance_stats
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   –ü–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_patches']}")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {stats['total_predictions']}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['processing_time']:.2f}—Å")
        print(f"   –ò–Ω—Ñ–µ—Ä–µ–Ω—Å: {stats['inference_time']:.2f}—Å ({stats['inference_time']/stats['processing_time']*100:.1f}%)")
        print(f"   –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: {stats['merging_time']:.2f}—Å ({stats['merging_time']/stats['processing_time']*100:.1f}%)")
        print(f"   –£–ø—Ä–æ—â–µ–Ω–∏–µ: {stats['simplification_time']:.2f}—Å ({stats['simplification_time']/stats['processing_time']*100:.1f}%)")
        
        if stats['total_patches'] > 0:
            patches_per_sec = stats['total_patches'] / stats['processing_time']
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {patches_per_sec:.1f} –ø–∞—Ç—á–µ–π/—Å–µ–∫")

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ WSI YOLO Pipeline")
    print("=" * 60)
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
    model_paths = {
        'lp': 'models/lp.pt',
        'mild': 'models/mild.pt',
        'moderate': 'models/moderate.pt'
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pipeline
    pipeline = ImprovedWSIYOLOPipeline(
        model_paths=model_paths,
        patch_size=512,
        batch_size=16,  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_workers=2   # –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º WSI
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    if os.path.exists(wsi_path):
        results = pipeline.process_wsi(wsi_path, "results_improved")
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(results['predictions'])}")
    else:
        print(f"‚ùå WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_path}")

if __name__ == "__main__":
    main()
