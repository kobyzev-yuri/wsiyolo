"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π patch loader –¥–ª—è WSI.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç cuCIM –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π.
"""

import numpy as np
from typing import List, Tuple
import cucim
from cucim import CuImage

from data_structures import PatchInfo, WSIInfo, Coords


class SimplePatchLoader:
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–∞—Ç—á–µ–π –∏–∑ WSI"""
    
    def __init__(self, tile_size: int = 512, overlap_ratio: float = 0.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        
        Args:
            tile_size: –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞
            overlap_ratio: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è (0.5 = 50% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ)
        """
        self.tile_size = tile_size
        self.overlap_ratio = overlap_ratio
        self.step_size = int(tile_size * (1 - overlap_ratio))
    
    def load_wsi_info(self, wsi_path: str) -> WSIInfo:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WSI
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            
        Returns:
            WSIInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSI
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º WSI —Å –ø–æ–º–æ—â—å—é cuCIM
            wsi = CuImage(wsi_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            width = wsi.shape[1]
            height = wsi.shape[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
            levels = wsi.resolutions["level_count"]
            
            # –ü–æ–ª—É—á–∞–µ–º MPP
            mpp = wsi.metadata.get('mpp', None)
            
            return WSIInfo(
                path=wsi_path,
                width=width,
                height=height,
                levels=levels,
                level_downsamples=[1.0],
                mpp=mpp
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WSI: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return WSIInfo(
                path=wsi_path,
                width=0,
                height=0,
                levels=1,
                level_downsamples=[1.0],
                mpp=None
            )
    
    def extract_patches(self, wsi_path: str, max_patches: int = None) -> List[PatchInfo]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—á–∏ –∏–∑ WSI
        
        Args:
            wsi_path: –ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É
            max_patches: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π
            
        Returns:
            List[PatchInfo]: –°–ø–∏—Å–æ–∫ –ø–∞—Ç—á–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∏–∑ WSI: {wsi_path}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º WSI
            wsi = CuImage(wsi_path)
            
            patches = []
            patch_id = 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∞—Ç—á–µ–π —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            height, width = wsi.shape[:2]
            
            print(f"üìä –†–∞–∑–º–µ—Ä WSI: {width}x{height}")
            print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: tile_size={self.tile_size}, step_size={self.step_size}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            total_patches = 0
            for y in range(0, height - self.tile_size + 1, self.step_size):
                for x in range(0, width - self.tile_size + 1, self.step_size):
                    total_patches += 1
            
            print(f"   –í—Å–µ–≥–æ –ø–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_patches}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            from tqdm import tqdm
            
            patch_coords = []
            for y in range(0, height - self.tile_size + 1, self.step_size):
                for x in range(0, width - self.tile_size + 1, self.step_size):
                    patch_coords.append((x, y))
            
            for x, y in tqdm(patch_coords, desc="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á
                patch_img = wsi.read_region((x, y), (self.tile_size, self.tile_size))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –∏ RGB —Ñ–æ—Ä–º–∞—Ç
                if hasattr(patch_img, 'numpy'):
                    patch_img = patch_img.numpy()
                else:
                    patch_img = np.array(patch_img)
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if len(patch_img.shape) == 3 and patch_img.shape[2] == 4:
                    # RGBA -> RGB
                    patch_img = patch_img[:, :, :3]
                elif len(patch_img.shape) == 2:
                    # Grayscale -> RGB
                    patch_img = np.stack([patch_img] * 3, axis=-1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ç—á —Ç–∫–∞–Ω—å
                has_tissue = self._has_tissue(patch_img)
                
                if has_tissue:
                    patch_info = PatchInfo(
                        patch_id=patch_id,
                        x=x,
                        y=y,
                        size=self.tile_size,
                        image=patch_img,
                        has_tissue=True
                    )
                    patches.append(patch_info)
                    patch_id += 1
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π
                    if max_patches and len(patches) >= max_patches:
                        break
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ç—á–µ–π —Å —Ç–∫–∞–Ω—å—é: {len(patches)}")
            return patches
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π: {e}")
            return []
    
    def _has_tissue(self, patch: np.ndarray) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∫–∞–Ω–∏ –≤ –ø–∞—Ç—á–µ
        
        Args:
            patch: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ç—á–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∫–∞–Ω—å
        """
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∫–∞–Ω–∏
        if len(patch.shape) == 3:
            # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            mean_brightness = np.mean(patch)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–µ, —Ç–æ —ç—Ç–æ —Ñ–æ–Ω
            if np.all(patch > 240):
                return False
        else:
            mean_brightness = np.mean(patch)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Ç–∫–∞–Ω—å –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–∞—Ä–∏–∞—Ü–∏—é)
        std_dev = np.std(patch)
        
        # –ü–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∫–∞–Ω—å –µ—Å–ª–∏:
        # 1. –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è
        # 2. –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π
        has_tissue = (mean_brightness < 240) and (std_dev > 10)
        
        return has_tissue
    
    def save_patch(self, patch_info: PatchInfo, output_path: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ç—á –≤ —Ñ–∞–π–ª
        
        Args:
            patch_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ç—á–µ
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            import cv2
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if len(patch_info.image.shape) == 3:
                # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_to_save = cv2.cvtColor(patch_info.image, cv2.COLOR_RGB2BGR)
            else:
                # Grayscale
                img_to_save = patch_info.image
            
            cv2.imwrite(output_path, img_to_save)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}")
