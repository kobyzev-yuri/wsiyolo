"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ background –∫–ª–∞—Å—Å–∞,
–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è lp –º–æ–¥–µ–ª–∏.
"""

from typing import List, Tuple, Optional
import numpy as np
from shapely.geometry import Polygon, MultiPolygon
from shapely.ops import unary_union
from shapely.validation import make_valid

from data_structures import Prediction, Coords, Box


class ImprovedPolygonMerger:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
    
    def __init__(self, 
                 iou_threshold: float = 0.7,  # –£–≤–µ–ª–∏—á–µ–Ω —Å 0.5 –¥–æ 0.7
                 min_area: float = 50.0,      # –£–≤–µ–ª–∏—á–µ–Ω —Å 10.0 –¥–æ 50.0
                 min_polygon_points: int = 8,  # –ú–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è lp –∫–ª–∞—Å—Å–∞
                 lp_class_name: str = "lp",    # –ù–∞–∑–≤–∞–Ω–∏–µ lp –∫–ª–∞—Å—Å–∞
                 background_class: str = "background"):  # –ù–∞–∑–≤–∞–Ω–∏–µ background –∫–ª–∞—Å—Å–∞
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ merger
        
        Args:
            iou_threshold: –ü–æ—Ä–æ–≥ IoU –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω –¥–æ 0.7)
            min_area: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 50.0)
            min_polygon_points: –ú–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è lp –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            lp_class_name: –ù–∞–∑–≤–∞–Ω–∏–µ lp –∫–ª–∞—Å—Å–∞
            background_class: –ù–∞–∑–≤–∞–Ω–∏–µ background –∫–ª–∞—Å—Å–∞
        """
        self.iou_threshold = iou_threshold
        self.min_area = min_area
        self.min_polygon_points = min_polygon_points
        self.lp_class_name = lp_class_name
        self.background_class = background_class
    
    def merge_predictions(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if not predictions:
            return []
        
        print(f"üîß –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        
        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è background –∫–ª–∞—Å—Å–∞ –¥–ª—è lp –º–æ–¥–µ–ª–∏
        filtered_predictions = self._filter_background_class(predictions)
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ background: {len(filtered_predictions)}")
        
        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è lp –∫–ª–∞—Å—Å–∞
        filtered_predictions = self._filter_short_segments(filtered_predictions)
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(filtered_predictions)}")
        
        # 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        grouped_predictions = self._group_by_class(filtered_predictions)
        
        merged_predictions = []
        
        for class_name, class_predictions in grouped_predictions.items():
            print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞ {class_name}: {len(class_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            
            # 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è lp –∫–ª–∞—Å—Å–∞
            if class_name == self.lp_class_name:
                class_predictions = self._filter_nested_objects(class_predictions)
                print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(class_predictions)}")
            
            # 5. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–ª–∞—Å—Å–∞
            merged_class_predictions = self._merge_class_predictions(class_predictions)
            merged_predictions.extend(merged_class_predictions)
        
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(merged_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        return merged_predictions
    
    def _filter_background_class(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –ò—Å–∫–ª—é—á–∞–µ—Ç background –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π lp –º–æ–¥–µ–ª–∏
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        filtered = []
        
        for pred in predictions:
            # –ò—Å–∫–ª—é—á–∞–µ–º background –∫–ª–∞—Å—Å
            if pred.class_name.lower() == self.background_class.lower():
                print(f"   –ò—Å–∫–ª—é—á–µ–Ω background –∫–ª–∞—Å—Å: {pred.class_name}")
                continue
            
            filtered.append(pred)
        
        return filtered
    
    def _filter_short_segments(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è lp –∫–ª–∞—Å—Å–∞
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        filtered = []
        
        for pred in predictions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ lp –∫–ª–∞—Å—Å
            if pred.class_name == self.lp_class_name and pred.polygon:
                polygon_points = len(pred.polygon)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                if polygon_points < self.min_polygon_points:
                    print(f"   –ò—Å–∫–ª—é—á–µ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç lp: {polygon_points} —Ç–æ—á–µ–∫")
                    continue
            
            filtered.append(pred)
        
        return filtered
    
    def _filter_nested_objects(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è lp –∫–ª–∞—Å—Å–∞
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if len(predictions) <= 1:
            return predictions
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        polygons_with_predictions = []
        
        for pred in predictions:
            if pred.polygon and len(pred.polygon) >= 3:
                try:
                    coords = [(p.x, p.y) for p in pred.polygon]
                    poly = Polygon(coords)
                    if poly.is_valid:
                        polygons_with_predictions.append((poly, pred))
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
                    continue
        
        if not polygons_with_predictions:
            return predictions
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–∞–ª–µ–Ω—å–∫–∏–º)
        polygons_with_predictions.sort(key=lambda x: x[0].area, reverse=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
        filtered_predictions = []
        
        for i, (poly1, pred1) in enumerate(polygons_with_predictions):
            is_nested = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ (–±–æ–ª—å—à–∏–º–∏) –æ–±—ä–µ–∫—Ç–∞–º–∏
            for j, pred2 in enumerate(filtered_predictions):
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è pred2
                if pred2.polygon:
                    coords2 = [(p.x, p.y) for p in pred2.polygon]
                    poly2 = Polygon(coords2)
                else:
                    continue
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                within_check = poly1.within(poly2)
                contains_check = poly2.contains(poly1)
                intersection_ratio = poly1.intersection(poly2).area / poly1.area if poly1.area > 0 else 0
                
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: poly1({poly1.area:.1f}) vs poly2({poly2.area:.1f})")
                print(f"     within: {within_check}, contains: {contains_check}, intersection_ratio: {intersection_ratio:.3f}")
                
                # –û–±—ä–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–ª–æ–∂–µ–Ω–Ω—ã–º –µ—Å–ª–∏:
                # 1. –û–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ (within)
                # 2. –î—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ (contains) 
                # 3. –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –µ–≥–æ –ø–ª–æ—â–∞–¥–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º –æ–±—ä–µ–∫—Ç–æ–º (>80%)
                if within_check or contains_check or intersection_ratio > 0.8:
                    print(f"   –ò—Å–∫–ª—é—á–µ–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç lp: –ø–ª–æ—â–∞–¥—å {poly1.area:.1f} –≤–ª–æ–∂–µ–Ω–∞ –≤ {poly2.area:.1f}")
                    is_nested = True
                    break
            
            if not is_nested:
                filtered_predictions.append(pred1)
                print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—ä–µ–∫—Ç lp: –ø–ª–æ—â–∞–¥—å {poly1.area:.1f}")
        
        return filtered_predictions
    
    def _group_by_class(self, predictions: List[Prediction]) -> dict:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å {class_name: [predictions]}
        """
        grouped = {}
        for pred in predictions:
            if pred.class_name not in grouped:
                grouped[pred.class_name] = []
            grouped[pred.class_name].append(pred)
        return grouped
    
    def _merge_class_predictions(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            
        Returns:
            List[Prediction]: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if len(predictions) <= 1:
            return predictions
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        polygons = []
        
        for i, pred in enumerate(predictions):
            if pred.polygon:
                try:
                    coords = [(p.x, p.y) for p in pred.polygon]
                    if len(coords) >= 3:
                        poly = Polygon(coords)
                        if poly.is_valid:
                            polygons.append(poly)
                        else:
                            print(f"   ‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {i}")
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ {i}: {len(coords)}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ {i}: {e}")
                    continue
        
        if not polygons:
            return predictions
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
        try:
            merged_polygons = unary_union(polygons)
            
            if merged_polygons.is_empty:
                return predictions
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            merged_predictions = []
            class_name = predictions[0].class_name if predictions else "unknown"
            
            if isinstance(merged_polygons, MultiPolygon):
                for poly in merged_polygons.geoms:
                    if poly.area >= self.min_area:
                        merged_pred = self._polygon_to_prediction(poly, class_name)
                        if merged_pred:
                            merged_predictions.append(merged_pred)
            else:
                if merged_polygons.area >= self.min_area:
                    merged_pred = self._polygon_to_prediction(merged_polygons, class_name)
                    if merged_pred:
                        merged_predictions.append(merged_pred)
            
            return merged_predictions if merged_predictions else predictions
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {e}")
            return predictions
    
    def _polygon_to_prediction(self, polygon: Polygon, class_name: str) -> Optional[Prediction]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç shapely –ø–æ–ª–∏–≥–æ–Ω –≤ Prediction —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–æ—â–µ–Ω–∏–µ–º
        
        Args:
            polygon: Shapely –ø–æ–ª–∏–≥–æ–Ω
            class_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            
        Returns:
            Optional[Prediction]: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ None
        """
        try:
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è lp –∫–ª–∞—Å—Å–∞
            if class_name == self.lp_class_name:
                max_points = 60
            else:
                max_points = 40  # –ú–µ–Ω—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
            
            if len(polygon.exterior.coords) > max_points:
                print(f"   –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ {class_name}: {len(polygon.exterior.coords)} -> {max_points} —Ç–æ—á–µ–∫")
                polygon = self._smart_simplify_polygon(polygon, max_points=max_points)
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞
            bounds = polygon.bounds
            minx, miny, maxx, maxy = bounds
            
            # –°–æ–∑–¥–∞–µ–º bounding box
            box = Box(
                start=Coords(x=minx, y=miny),
                end=Coords(x=maxx, y=maxy)
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            coords = list(polygon.exterior.coords[:-1])
            polygon_coords = [Coords(x=x, y=y) for x, y in coords]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.8  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
            return Prediction(
                class_name=class_name,
                box=box,
                conf=confidence,
                polygon=polygon_coords
            )
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
            return None
    
    def _smart_simplify_polygon(self, polygon: Polygon, max_points: int = 60) -> Polygon:
        """
        –£–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            polygon: –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
            max_points: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
            
        Returns:
            Polygon: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
        """
        try:
            current_poly = polygon
            current_points = len(current_poly.exterior.coords)
            
            if current_points <= max_points:
                return current_poly
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–æ—â–µ–Ω–∏—è
            min_tolerance = 0.2  # –£–≤–µ–ª–∏—á–µ–Ω —Å 0.1
            max_tolerance = 5.0   # –£–º–µ–Ω—å—à–µ–Ω —Å 10.0
            best_poly = current_poly
            
            # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ tolerance
            for _ in range(8):  # –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                tolerance = (min_tolerance + max_tolerance) / 2
                simplified = current_poly.simplify(tolerance, preserve_topology=True)
                
                if simplified.is_valid and len(simplified.exterior.coords) > 3:
                    points_count = len(simplified.exterior.coords)
                    
                    if points_count <= max_points:
                        best_poly = simplified
                        min_tolerance = tolerance
                        if points_count >= max_points * 0.9:  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ
                            break
                    else:
                        max_tolerance = tolerance
                else:
                    max_tolerance = tolerance
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É
            if len(best_poly.exterior.coords) > max_points:
                coords = list(best_poly.exterior.coords)
                step = len(coords) // max_points
                sampled_coords = coords[::max(1, step)]
                
                if len(sampled_coords) >= 3:
                    sampled_poly = Polygon(sampled_coords)
                    if sampled_poly.is_valid:
                        best_poly = sampled_poly
            
            return best_poly
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
            return polygon
    
    def filter_by_improved_iou(self, predictions: List[Prediction]) -> List[Prediction]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É IoU (threshold=0.7)
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            
        Returns:
            List[Prediction]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if len(predictions) <= 1:
            return predictions
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_predictions = sorted(predictions, key=lambda x: x.conf, reverse=True)
        
        filtered = []
        
        for pred in sorted_predictions:
            is_duplicate = False
            
            for filtered_pred in filtered:
                if pred.class_name == filtered_pred.class_name:
                    iou = pred.box.iou(filtered_pred.box)
                    if iou > self.iou_threshold:  # 0.7 –≤–º–µ—Å—Ç–æ 0.5
                        is_duplicate = True
                        print(f"   –ò—Å–∫–ª—é—á–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ IoU {iou:.3f} > {self.iou_threshold}")
                        break
            
            if not is_duplicate:
                filtered.append(pred)
        
        return filtered
    
    def get_filtering_statistics(self, original_predictions: List[Prediction], 
                                filtered_predictions: List[Prediction]) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        
        Args:
            original_predictions: –ò—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            filtered_predictions: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        total_original = len(original_predictions)
        total_filtered = len(filtered_predictions)
        filtered_out = total_original - total_filtered
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_stats = {}
        for pred in original_predictions:
            class_name = pred.class_name
            if class_name not in class_stats:
                class_stats[class_name] = {'original': 0, 'filtered': 0}
            class_stats[class_name]['original'] += 1
        
        for pred in filtered_predictions:
            class_name = pred.class_name
            if class_name in class_stats:
                class_stats[class_name]['filtered'] += 1
        
        return {
            'total_original': total_original,
            'total_filtered': total_filtered,
            'filtered_out': filtered_out,
            'filtering_ratio': filtered_out / total_original if total_original > 0 else 0,
            'class_statistics': class_stats
        }
