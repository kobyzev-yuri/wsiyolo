#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import numpy as np
from pathlib import Path
from shapely.geometry import Polygon

def test_real_polygon_simplification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø–æ–ª–∏–≥–æ–Ω–µ –∏–∑ JSON"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    json_file = "/mnt/ai/cnn/wsiyolo/results/19_ibd_mod_S037__20240822_091343.json"
    
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    pred = data['predictions'][0]
    polygon = pred['polygon']
    
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(polygon)} —Ç–æ—á–µ–∫")
    print(f"   –ö–ª–∞—Å—Å: {pred['class_name']}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['confidence']}")
    
    # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
    coords = [(p['x'], p['y']) for p in polygon]
    poly = Polygon(coords)
    
    if poly.is_valid:
        print(f"   –ü–ª–æ—â–∞–¥—å: {poly.area:.1f}")
        print(f"   –ü–µ—Ä–∏–º–µ—Ç—Ä: {poly.length:.1f}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
        simplified = smart_simplify_polygon(poly, max_points=60)
        
        print(f"   –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(simplified.exterior.coords)} —Ç–æ—á–µ–∫")
        print(f"   –ü–ª–æ—â–∞–¥—å –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è: {simplified.area:.1f}")
        print(f"   –ü–µ—Ä–∏–º–µ—Ç—Ä –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è: {simplified.length:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        area_ratio = simplified.area / poly.area
        perimeter_ratio = simplified.length / poly.length
        
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {area_ratio:.3f}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞: {perimeter_ratio:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        points_ok = len(simplified.exterior.coords) <= 60
        area_ok = area_ratio > 0.8
        
        print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {'OK' if points_ok else 'FAIL'} ({len(simplified.exterior.coords)}/60)")
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {'OK' if area_ok else 'FAIL'} ({area_ratio:.3f})")
        
        return points_ok and area_ok
    else:
        print(f"   ‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
        return False

def smart_simplify_polygon(polygon, max_points=60):
    """–£–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫"""
    try:
        current_poly = polygon
        current_points = len(current_poly.exterior.coords)
        
        if current_points <= max_points:
            return current_poly
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º tolerance
        min_tolerance = 0.1
        max_tolerance = 10.0
        best_poly = current_poly
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ tolerance
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
            tolerance = (min_tolerance + max_tolerance) / 2
            simplified = current_poly.simplify(tolerance, preserve_topology=True)
            
            if simplified.is_valid and len(simplified.exterior.coords) > 3:
                points_count = len(simplified.exterior.coords)
                
                if points_count <= max_points:
                    # –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    best_poly = simplified
                    min_tolerance = tolerance
                    if points_count >= max_points * 0.8:  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
                        break
                else:
                    # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–ø—Ä–æ—â–µ–Ω–∏—è
                    max_tolerance = tolerance
            else:
                # –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ
                max_tolerance = tolerance
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É
        if len(best_poly.exterior.coords) > max_points:
            coords = list(best_poly.exterior.coords)
            step = len(coords) // max_points
            sampled_coords = coords[::max(1, step)]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
            if len(sampled_coords) >= 3:
                sampled_poly = Polygon(sampled_coords)
                if sampled_poly.is_valid:
                    best_poly = sampled_poly
        
        return best_poly
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
        return polygon

def create_optimized_json():
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é JSON —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏"""
    
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ JSON:")
    
    json_file = "/mnt/ai/cnn/wsiyolo/results/19_ibd_mod_S037__20240822_091343.json"
    
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    optimized_predictions = []
    
    for pred in data['predictions']:
        polygon = pred['polygon']
        
        # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
        coords = [(p['x'], p['y']) for p in polygon]
        poly = Polygon(coords)
        
        if poly.is_valid:
            # –£–ø—Ä–æ—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            simplified = smart_simplify_polygon(poly, max_points=60)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            optimized_pred = pred.copy()
            optimized_pred['polygon'] = [
                {'x': x, 'y': y} for x, y in simplified.exterior.coords[:-1]
            ]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º bbox
            bounds = simplified.bounds
            optimized_pred['box'] = {
                'start': {'x': bounds[0], 'y': bounds[1]},
                'end': {'x': bounds[2], 'y': bounds[3]}
            }
            
            optimized_predictions.append(optimized_pred)
            
            print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(polygon)} -> {len(optimized_pred['polygon'])} —Ç–æ—á–µ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö
    optimized_data = data.copy()
    optimized_data['predictions'] = optimized_predictions
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    optimized_data['statistics']['total'] = len(optimized_predictions)
    optimized_data['statistics']['by_class'] = {pred['class_name']: 1 for pred in optimized_predictions}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    output_file = "/mnt/ai/cnn/wsiyolo/results/19_ibd_mod_S037__20240822_091343_optimized.json"
    
    with open(output_file, 'w') as f:
        json.dump(optimized_data, f, indent=2)
    
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    original_size = Path(json_file).stat().st_size
    optimized_size = Path(output_file).stat().st_size
    
    print(f"   –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {original_size / 1024 / 1024:.2f} MB")
    print(f"   –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {optimized_size / 1024 / 1024:.2f} MB")
    print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {(1 - optimized_size / original_size) * 100:.1f}%")
    
    return output_file

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n")
    
    # –¢–µ—Å—Ç 1: –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
    test1_passed = test_real_polygon_simplification()
    print(f"   ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ: {'–ü–†–û–ô–î–ï–ù' if test1_passed else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON
    try:
        optimized_file = create_optimized_json()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON: –ü–†–û–ô–î–ï–ù")
    except Exception as e:
        print(f"   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON: –ü–†–û–í–ê–õ–ï–ù - {e}")
        test1_passed = False
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    if test1_passed:
        print(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–≥—Ä–æ–º–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ —Ä–µ—à–µ–Ω–∞.")
        print(f"   - –ü–æ–ª–∏–≥–æ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ 60 —Ç–æ—á–µ–∫ –º–∞–∫—Å–∏–º—É–º")
        print(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ > 80%")
        print(f"   - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤")
    else:
        print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

