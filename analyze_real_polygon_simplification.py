#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∫—Ä–∏–ø—Ç).
"""

import json
import numpy as np
from shapely.geometry import Polygon
from shapely.ops import unary_union
import matplotlib.pyplot as plt
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from data_structures import Coords, Box, Prediction

def load_predictions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('results/predictions.json', 'r') as f:
            data = json.load(f)
        return data['predictions']
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        return []

def analyze_polygon_complexity(polygon_coords):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω–∞"""
    if not polygon_coords or len(polygon_coords) < 3:
        return {
            'point_count': 0,
            'perimeter': 0,
            'area': 0,
            'complexity_ratio': 0,
            'is_simple': False
        }
    
    # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
    try:
        coords = [(p['x'], p['y']) for p in polygon_coords]
        poly = Polygon(coords)
        
        if not poly.is_valid:
            return {
                'point_count': len(polygon_coords),
                'perimeter': 0,
                'area': 0,
                'complexity_ratio': 0,
                'is_simple': False,
                'error': 'Invalid polygon'
            }
        
        perimeter = poly.length
        area = poly.area
        point_count = len(polygon_coords)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ø–µ—Ä–∏–º–µ—Ç—Ä/–ø–ª–æ—â–∞–¥—å (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ)
        complexity_ratio = perimeter / (area ** 0.5) if area > 0 else 0
        
        return {
            'point_count': point_count,
            'perimeter': perimeter,
            'area': area,
            'complexity_ratio': complexity_ratio,
            'is_simple': poly.is_valid and point_count >= 3,
            'is_valid': poly.is_valid
        }
    except Exception as e:
        return {
            'point_count': len(polygon_coords),
            'perimeter': 0,
            'area': 0,
            'complexity_ratio': 0,
            'is_simple': False,
            'error': str(e)
        }

def smart_simplify_polygon(polygon, max_points=60):
    """–£–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ (–∫–æ–ø–∏—è –∏–∑ pipeline)"""
    try:
        current_points = len(polygon.exterior.coords)
        
        if current_points <= max_points:
            return polygon
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–æ—â–µ–Ω–∏—è
        min_tolerance = 0.1
        max_tolerance = 10.0
        best_poly = polygon
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ tolerance
        for _ in range(10):
            tolerance = (min_tolerance + max_tolerance) / 2
            simplified = polygon.simplify(tolerance, preserve_topology=True)
            
            if simplified.is_valid and len(simplified.exterior.coords) > 3:
                points_count = len(simplified.exterior.coords)
                
                if points_count <= max_points:
                    best_poly = simplified
                    min_tolerance = tolerance
                    if points_count >= max_points * 0.8:
                        break
                else:
                    max_tolerance = tolerance
            else:
                max_tolerance = tolerance
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É
        if len(best_poly.exterior.coords) > max_points:
            coords = list(best_poly.exterior.coords)
            step = len(coords) / max_points
            sampled_coords = []
            
            for i in range(max_points):
                idx = int(i * step) % len(coords)
                sampled_coords.append(coords[idx])
            
            try:
                best_poly = Polygon(sampled_coords)
                if not best_poly.is_valid:
                    best_poly = polygon  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
            except:
                best_poly = polygon
        
        return best_poly
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
        return polygon

def analyze_simplification_impact(original_polygon, simplified_polygon):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω"""
    try:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
        orig_points = len(original_polygon.exterior.coords)
        orig_perimeter = original_polygon.length
        orig_area = original_polygon.area
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
        simp_points = len(simplified_polygon.exterior.coords)
        simp_perimeter = simplified_polygon.length
        simp_area = simplified_polygon.area
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        point_reduction = (orig_points - simp_points) / orig_points * 100
        perimeter_change = (orig_perimeter - simp_perimeter) / orig_perimeter * 100
        area_change = (orig_area - simp_area) / orig_area * 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
        is_pathological = {
            'too_few_points': simp_points < 6,  # –ú–µ–Ω—å—à–µ 6 —Ç–æ—á–µ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            'excessive_simplification': point_reduction > 90,  # –°–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
            'shape_distortion': abs(area_change) > 20,  # –°–∏–ª—å–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            'invalid_result': not simplified_polygon.is_valid
        }
        
        return {
            'original': {
                'points': orig_points,
                'perimeter': orig_perimeter,
                'area': orig_area
            },
            'simplified': {
                'points': simp_points,
                'perimeter': simp_perimeter,
                'area': simp_area
            },
            'changes': {
                'point_reduction_pct': point_reduction,
                'perimeter_change_pct': perimeter_change,
                'area_change_pct': area_change
            },
            'pathological': is_pathological,
            'is_problematic': any(is_pathological.values())
        }
        
    except Exception as e:
        return {
            'error': str(e),
            'is_problematic': True
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = load_predictions()
    if not predictions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    analysis_results = []
    problematic_cases = []
    
    for i, pred in enumerate(predictions[:100]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100
        if 'polygon' not in pred or not pred['polygon']:
            continue
            
        polygon_coords = pred['polygon']
        class_name = pred.get('class_name', 'unknown')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = analyze_polygon_complexity(polygon_coords)
        
        if not complexity['is_simple']:
            continue
        
        # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
        try:
            coords = [(p['x'], p['y']) for p in polygon_coords]
            original_polygon = Polygon(coords)
            
            if not original_polygon.is_valid:
                continue
            
            # –£–ø—Ä–æ—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            simplified_polygon = smart_simplify_polygon(original_polygon)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–∏—è
            impact = analyze_simplification_impact(original_polygon, simplified_polygon)
            
            result = {
                'index': i,
                'class': class_name,
                'complexity': complexity,
                'impact': impact
            }
            
            analysis_results.append(result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
            if impact.get('is_problematic', False):
                problematic_cases.append(result)
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π {i} ({class_name}):")
                print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {impact['original']['points']}")
                print(f"   –ü–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è: {impact['simplified']['points']}")
                print(f"   –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {impact['changes']['point_reduction_pct']:.1f}%")
                print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {[k for k, v in impact['pathological'].items() if v]}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {i}: {e}")
            continue
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(analysis_results)}")
    print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {len(problematic_cases)}")
    
    if analysis_results:
        point_reductions = [r['impact']['changes']['point_reduction_pct'] for r in analysis_results]
        area_changes = [abs(r['impact']['changes']['area_change_pct']) for r in analysis_results]
        
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫: {np.mean(point_reductions):.1f}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {np.max(point_reductions):.1f}%")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {np.mean(area_changes):.1f}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {np.max(area_changes):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_stats = {}
    for result in analysis_results:
        class_name = result['class']
        if class_name not in class_stats:
            class_stats[class_name] = {'total': 0, 'problematic': 0}
        
        class_stats[class_name]['total'] += 1
        if result['impact'].get('is_problematic', False):
            class_stats[class_name]['problematic'] += 1
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_name, stats in class_stats.items():
        problematic_pct = stats['problematic'] / stats['total'] * 100
        print(f"   {class_name}: {stats['total']} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, {problematic_pct:.1f}% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if len(problematic_cases) > len(analysis_results) * 0.1:  # –ë–æ–ª–µ–µ 10% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
        print("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("      - –£–≤–µ–ª–∏—á–∏—Ç—å min_tolerance –¥–ª—è –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è")
        print("      - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫")
        print("      - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω–∞")
    else:
        print("   ‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return analysis_results, problematic_cases

if __name__ == "__main__":
    main()
