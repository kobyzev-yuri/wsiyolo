#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—á–µ–π –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
"""

import json
import numpy as np
import cv2
from pathlib import Path
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.colors import ListedColormap
import random

def load_predictions(json_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ JSON"""
    with open(json_path, 'r') as f:
        data = json.load(f)
    return data

def get_class_colors():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    classes = [
        'Crypts', 'Muscularis mucosae', 'Surface epithelium', 
        'moderate_segmentation', 'Mild', 'excl'
    ]
    
    # –°–æ–∑–¥–∞–µ–º —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    colors = [
        '#FF6B6B',  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è Crypts
        '#4ECDC4',  # –ë–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è Muscularis mucosae
        '#45B7D1',  # –°–∏–Ω–∏–π –¥–ª—è Surface epithelium
        '#96CEB4',  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è moderate_segmentation
        '#FFEAA7',  # –ñ–µ–ª—Ç—ã–π –¥–ª—è Mild
        '#DDA0DD'   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è excl
    ]
    
    return dict(zip(classes, colors))

def create_annotated_patch(patch_image, predictions, patch_coords, class_colors):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—á"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—á
    ax1.imshow(patch_image)
    ax1.set_title('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—á')
    ax1.axis('off')
    
    # –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—á
    ax2.imshow(patch_image)
    ax2.set_title('–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—á')
    ax2.axis('off')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    legend_elements = []
    
    for pred in predictions:
        class_name = pred['class_name']
        confidence = pred['confidence']
        box = pred['box']
        polygon = pred.get('polygon', [])
        
        color = class_colors.get(class_name, '#000000')
        
        # –†–∏—Å—É–µ–º bounding box
        x1, y1 = box['start']['x'] - patch_coords[0], box['start']['y'] - patch_coords[1]
        x2, y2 = box['end']['x'] - patch_coords[0], box['end']['y'] - patch_coords[1]
        width, height = x2 - x1, y2 - y1
        
        rect = patches.Rectangle((x1, y1), width, height, 
                               linewidth=2, edgecolor=color, facecolor='none', alpha=0.8)
        ax2.add_patch(rect)
        
        # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if polygon:
            poly_coords = []
            for point in polygon:
                px = point['x'] - patch_coords[0]
                py = point['y'] - patch_coords[1]
                poly_coords.append([px, py])
            
            if len(poly_coords) >= 3:
                poly = patches.Polygon(poly_coords, linewidth=1, 
                                     edgecolor=color, facecolor=color, alpha=0.3)
                ax2.add_patch(poly)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–µ–≥–µ–Ω–¥—É
        legend_elements.append(patches.Patch(color=color, 
                                           label=f'{class_name} ({confidence:.2f})'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    ax2.legend(handles=legend_elements, loc='upper right', fontsize=8)
    
    plt.tight_layout()
    return fig

def extract_patch_from_wsi(wsi_path, x, y, size=512):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—á –∏–∑ WSI"""
    try:
        import openslide
        slide = openslide.OpenSlide(wsi_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á –Ω–∞ —É—Ä–æ–≤–Ω–µ 0 (–ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        patch = slide.read_region((int(x), int(y)), 0, (size, size))
        patch = np.array(patch.convert('RGB'))
        
        slide.close()
        return patch
    except ImportError:
        print("‚ö†Ô∏è  openslide –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
        import subprocess
        try:
            subprocess.run(["pip", "install", "openslide-python"], check=True)
            print("‚úÖ openslide —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å openslide")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WSI: {e}")
        return None

def group_predictions_by_patches(predictions):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –ø–∞—Ç—á–∞–º"""
    patch_groups = {}
    
    for pred in predictions:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—á –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º bbox
        x = pred['box']['start']['x']
        y = pred['box']['start']['y']
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞—Ç—á–∞ (512)
        patch_x = (x // 512) * 512
        patch_y = (y // 512) * 512
        patch_key = (patch_x, patch_y)
        
        if patch_key not in patch_groups:
            patch_groups[patch_key] = []
        patch_groups[patch_key].append(pred)
    
    return patch_groups

def get_patch_grid_coordinates(patch_x, patch_y, patch_size=512):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ç—á–∞ –≤ —Å–µ—Ç–∫–µ (i, j)"""
    i = int(patch_x // patch_size)
    j = int(patch_y // patch_size)
    return i, j

def get_wsi_base_name(wsi_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏–º—è WSI —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    from pathlib import Path
    return Path(wsi_path).stem

def create_annotated_patches(json_path, wsi_path, output_dir="annotated_patches", max_patches=None):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–∏"""
    
    print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    data = load_predictions(json_path)
    predictions = data['predictions']
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ excl
    useful_predictions = [p for p in predictions if p['class_name'] != 'excl']
    print(f"   –ü–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–±–µ–∑ excl): {len(useful_predictions)}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
    class_colors = get_class_colors()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –ø–∞—Ç—á–∞–º
    print("üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –ø–∞—Ç—á–∞–º...")
    patch_groups = group_predictions_by_patches(useful_predictions)
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—á–µ–π —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏: {len(patch_groups)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    sorted_patches = sorted(patch_groups.items(), key=lambda x: len(x[1]), reverse=True)
    
    # –ï—Å–ª–∏ max_patches –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –≤—Å–µ –ø–∞—Ç—á–∏
    if max_patches is None:
        selected_patches = sorted_patches
        print(f"   –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–∏ –¥–ª—è –í–°–ï–• –ø–∞—Ç—á–µ–π —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏: {len(selected_patches)}")
    else:
        selected_patches = sorted_patches[:max_patches]
        print(f"   –í—ã–±—Ä–∞–Ω–æ —Ç–æ–ø-{len(selected_patches)} –ø–∞—Ç—á–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—á–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è WSI
    wsi_base_name = get_wsi_base_name(wsi_path)
    
    for i, ((patch_x, patch_y), patch_predictions) in enumerate(selected_patches):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ç—á–∞ –≤ —Å–µ—Ç–∫–µ
        patch_i, patch_j = get_patch_grid_coordinates(patch_x, patch_y)
        
        print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—á–∞ {i+1}/{len(selected_patches)}: ({patch_x}, {patch_y}) -> grid({patch_i}, {patch_j}) - {len(patch_predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á –∏–∑ WSI
        patch_image = extract_patch_from_wsi(wsi_path, patch_x, patch_y)
        
        if patch_image is None:
            print(f"     ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞—Ç—á {i+1}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—á
        fig = create_annotated_patch(patch_image, patch_predictions, (patch_x, patch_y), class_colors)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º: wsi_name_i_j.png
        output_file = output_path / f"{wsi_base_name}_{patch_i}_{patch_j}.png"
        fig.savefig(output_file, dpi=150, bbox_inches='tight')
        plt.close(fig)
        
        print(f"     ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
    
    print(f"\n‚úÖ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–∏ —Å–æ–∑–¥–∞–Ω—ã –≤: {output_path}")
    print(f"   –í—Å–µ–≥–æ –ø–∞—Ç—á–µ–π: {len(selected_patches)}")
    
    return output_path

def create_summary_visualization(json_path, output_dir="annotated_patches"):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    data = load_predictions(json_path)
    predictions = data['predictions']
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_counts = {}
    class_confidences = {}
    
    for pred in predictions:
        class_name = pred['class_name']
        confidence = pred['confidence']
        
        if class_name not in class_counts:
            class_counts[class_name] = 0
            class_confidences[class_name] = []
        
        class_counts[class_name] += 1
        class_confidences[class_name].append(confidence)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º
    classes = list(class_counts.keys())
    counts = list(class_counts.values())
    colors = [get_class_colors().get(cls, '#000000') for cls in classes]
    
    bars = ax1.bar(classes, counts, color=colors, alpha=0.7)
    ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax1.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, count in zip(bars, counts):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                str(count), ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    for class_name, confidences in class_confidences.items():
        ax2.hist(confidences, alpha=0.6, label=class_name, 
                color=get_class_colors().get(class_name, '#000000'), bins=20)
    
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º')
    ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
    ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    summary_file = output_path / "summary_visualization.png"
    fig.savefig(summary_file, dpi=150, bbox_inches='tight')
    plt.close(fig)
    
    print(f"   –°–≤–æ–¥–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_file}")
    
    return summary_file

if __name__ == "__main__":
    json_path = "results/predictions.json"
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—á–µ–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—á–∏ (–í–°–ï –ø–∞—Ç—á–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏)
    output_dir = create_annotated_patches(json_path, wsi_path, max_patches=None)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_summary_visualization(json_path, str(output_dir))
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
