#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏–≥–æ–Ω–æ–º
"""

import json
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from shapely.ops import unary_union
from skimage import measure

def analyze_mask_to_polygon_issue():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ —Ñ—É–Ω–∫—Ü–∏–∏ _mask_to_polygon"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ _mask_to_polygon:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Å–∫—É —Å –ø—Ä–æ–±–ª–µ–º–æ–π
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –¥–∞—Ç—å –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫
    mask = np.zeros((512, 512), dtype=np.float32)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Ñ–æ—Ä–º—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π
    # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ YOLO —Å–æ–∑–¥–∞–µ—Ç –æ—á–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Å–∫—É
    for i in range(100, 400):
        for j in range(100, 400):
            # –°–æ–∑–¥–∞–µ–º "—à—É–º–Ω—É—é" –º–∞—Å–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
            if (i - 250)**2 + (j - 250)**2 < 10000:  # –ö—Ä—É–≥
                mask[i, j] = 1.0
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
                if (i + j) % 3 == 0:
                    mask[i, j] = 0.8
                if (i * j) % 5 == 0:
                    mask[i, j] = 0.9
    
    print(f"   –†–∞–∑–º–µ—Ä –º–∞—Å–∫–∏: {mask.shape}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(np.unique(mask))}")
    print(f"   –ú–∏–Ω–∏–º—É–º: {mask.min()}, –ú–∞–∫—Å–∏–º—É–º: {mask.max()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º find_contours
    try:
        contours = measure.find_contours(mask, 0.5)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: {len(contours)}")
        
        if contours:
            largest_contour = max(contours, key=len)
            print(f"   –†–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞: {len(largest_contour)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä
            print(f"   –ü–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫ –∫–æ–Ω—Ç—É—Ä–∞:")
            for i in range(min(10, len(largest_contour))):
                print(f"     {i}: ({largest_contour[i][1]:.1f}, {largest_contour[i][0]:.1f})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_points = set((p[1], p[0]) for p in largest_contour)
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ç—É—Ä–µ: {len(unique_points)} –∏–∑ {len(largest_contour)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            coords = [(p[1], p[0]) for p in largest_contour]
            poly = Polygon(coords)
            
            if poly.is_valid:
                print(f"   ‚úÖ –ü–æ–ª–∏–≥–æ–Ω –≤–∞–ª–∏–¥–µ–Ω")
                print(f"   –ü–ª–æ—â–∞–¥—å: {poly.area:.1f}")
                print(f"   –ü–µ—Ä–∏–º–µ—Ç—Ä: {poly.length:.1f}")
            else:
                print(f"   ‚ùå –ü–æ–ª–∏–≥–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {poly.validity_reason}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤: {e}")

def analyze_actual_polygon_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–∑ JSON"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞:")
    
    json_file = "/mnt/ai/cnn/wsiyolo/results/19_ibd_mod_S037__20240822_091343.json"
    
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    pred = data['predictions'][0]
    polygon = pred['polygon']
    
    print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(polygon)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    x_coords = [p['x'] for p in polygon]
    y_coords = [p['y'] for p in polygon]
    
    print(f"   X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
    print(f"     –ú–∏–Ω–∏–º—É–º: {min(x_coords):.1f}")
    print(f"     –ú–∞–∫—Å–∏–º—É–º: {max(x_coords):.1f}")
    print(f"     –î–∏–∞–ø–∞–∑–æ–Ω: {max(x_coords) - min(x_coords):.1f}")
    
    print(f"   Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
    print(f"     –ú–∏–Ω–∏–º—É–º: {min(y_coords):.1f}")
    print(f"     –ú–∞–∫—Å–∏–º—É–º: {max(y_coords):.1f}")
    print(f"     –î–∏–∞–ø–∞–∑–æ–Ω: {max(y_coords) - min(y_coords):.1f}")
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    print(f"\n   –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    x_diffs = [x_coords[i+1] - x_coords[i] for i in range(len(x_coords)-1)]
    y_diffs = [y_coords[i+1] - y_coords[i] for i in range(len(y_coords)-1)]
    
    unique_x_diffs = set(x_diffs)
    unique_y_diffs = set(y_diffs)
    
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö X —Ä–∞–∑–Ω–æ—Å—Ç–µ–π: {len(unique_x_diffs)}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Y —Ä–∞–∑–Ω–æ—Å—Ç–µ–π: {len(unique_y_diffs)}")
    
    # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–∞–∑–Ω–æ—Å—Ç–∏
    from collections import Counter
    x_diff_counts = Counter(x_diffs)
    y_diff_counts = Counter(y_diffs)
    
    print(f"   –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ X —Ä–∞–∑–Ω–æ—Å—Ç–∏:")
    for diff, count in x_diff_counts.most_common(5):
        print(f"     {diff:.1f}: {count} —Ä–∞–∑")
    
    print(f"   –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ Y —Ä–∞–∑–Ω–æ—Å—Ç–∏:")
    for diff, count in y_diff_counts.most_common(5):
        print(f"     {diff:.1f}: {count} —Ä–∞–∑")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "–ø–∏–∫—Å–µ–ª—å–Ω—ã–µ" –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    pixel_like_x = all(diff in [-1, 0, 1] for diff in unique_x_diffs)
    pixel_like_y = all(diff in [-1, 0, 1] for diff in unique_y_diffs)
    
    print(f"   –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
    print(f"     X: {'‚úÖ' if pixel_like_x else '‚ùå'}")
    print(f"     Y: {'‚úÖ' if pixel_like_y else '‚ùå'}")

def test_polygon_simplification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
    coords = []
    for i in range(1000):
        angle = i * 0.1
        x = 100 + 50 * np.cos(angle) + np.random.normal(0, 0.1)
        y = 100 + 50 * np.sin(angle) + np.random.normal(0, 0.1)
        coords.append((x, y))
    
    poly = Polygon(coords)
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(coords)} —Ç–æ—á–µ–∫, –ø–µ—Ä–∏–º–µ—Ç—Ä: {poly.length:.1f}")
    
    # –£–ø—Ä–æ—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
    try:
        simplified = poly.simplify(1.0, preserve_topology=True)
        print(f"   –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(simplified.exterior.coords)-1} —Ç–æ—á–µ–∫, –ø–µ—Ä–∏–º–µ—Ç—Ä: {simplified.length:.1f}")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è: {len(simplified.exterior.coords)/len(coords):.3f}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")

def suggest_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    
    print("1. –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ _mask_to_polygon:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å simplify() –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞")
    print("   - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Douglas-Peucker –∞–ª–≥–æ—Ä–∏—Ç–º")
    
    print("\n2. –£–ª—É—á—à–µ–Ω–∏–µ –≤ PolygonMerger:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ unary_union")
    print("   - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º –ø–æ–ª–∏–≥–æ–Ω–µ")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª–∏–≥–æ–Ω–∞")
    
    print("\n3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ YOLO inference:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å –º–∞—Å–∫–∏")
    print("   - –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    analyze_mask_to_polygon_issue()
    analyze_actual_polygon_structure()
    test_polygon_simplification()
    suggest_fixes()
    
    print("\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

