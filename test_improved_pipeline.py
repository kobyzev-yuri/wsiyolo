#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ WSI YOLO Pipeline.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º pipeline.
"""

import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from improved_wsi_yolo_pipeline import ImprovedWSIYOLOPipeline

def test_improved_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π pipeline"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ WSI YOLO Pipeline")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WSI —Ñ–∞–π–ª–∞
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    if not os.path.exists(wsi_path):
        print(f"‚ùå WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    model_paths = {
        'lp': 'models/lp.pt',
        'mild': 'models/mild.pt',
        'moderate': 'models/moderate.pt'
    }
    
    missing_models = []
    for model_name, model_path in model_paths.items():
        if not os.path.exists(model_path):
            missing_models.append(f"{model_name}: {model_path}")
    
    if missing_models:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–µ–ª–∏:")
        for missing in missing_models:
            print(f"   {missing}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pipeline —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    configs = [
        {
            'name': '–ë—ã—Å—Ç—Ä—ã–π (–º–∞–ª—ã–π –±–∞—Ç—á)',
            'batch_size': 8,
            'max_workers': 2,
            'patch_size': 512
        },
        {
            'name': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
            'batch_size': 16,
            'max_workers': 4,
            'patch_size': 512
        },
        {
            'name': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            'batch_size': 32,
            'max_workers': 6,
            'patch_size': 512
        }
    ]
    
    results = {}
    
    for config in configs:
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config['name']}")
        print(f"   –ë–∞—Ç—á —Ä–∞–∑–º–µ—Ä: {config['batch_size']}")
        print(f"   –ü–æ—Ç–æ–∫–æ–≤: {config['max_workers']}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º pipeline
            pipeline = ImprovedWSIYOLOPipeline(
                model_paths=model_paths,
                patch_size=config['patch_size'],
                batch_size=config['batch_size'],
                max_workers=config['max_workers']
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            start_time = time.time()
            result = pipeline.process_wsi(wsi_path, f"results_{config['name'].lower().replace(' ', '_')}")
            processing_time = time.time() - start_time
            
            if 'error' in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results[config['name']] = {
                'processing_time': processing_time,
                'predictions_count': len(result.get('predictions', [])),
                'performance_stats': pipeline.performance_stats
            }
            
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {processing_time:.2f}—Å")
            print(f"   üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(result.get('predictions', []))}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:")
        print(f"{'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è':<30} {'–í—Ä–µ–º—è (—Å)':<10} {'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π':<12} {'–ü–∞—Ç—á–µ–π/—Å–µ–∫':<12}")
        print("-" * 70)
        
        for config_name, result in results.items():
            time_sec = result['processing_time']
            predictions = result['predictions_count']
            patches = result['performance_stats'].get('total_patches', 0)
            throughput = patches / time_sec if time_sec > 0 else 0
            
            print(f"{config_name:<30} {time_sec:<10.2f} {predictions:<12} {throughput:<12.1f}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        best_config = min(results.items(), key=lambda x: x[1]['processing_time'])
        print(f"\nüèÜ –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {best_config[0]}")
        print(f"   –í—Ä–µ–º—è: {best_config[1]['processing_time']:.2f}—Å")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {best_config[1]['predictions_count']}")
        
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False

def test_specific_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —É–ø—Ä–æ—Å—Ç–∏—Ç–µ–ª—å
    print("   ‚úÇÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è...")
    try:
        from adaptive_polygon_simplifier import AdaptivePolygonSimplifier
        from shapely.geometry import Polygon
        
        simplifier = AdaptivePolygonSimplifier()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
        test_polygon = Polygon([(0, 0), (10, 0), (10, 10), (0, 10)])
        simplified, metrics = simplifier.simplify_polygon(test_polygon)
        
        print(f"     ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {metrics['method']}")
        print(f"     üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {metrics['area_preserved']:.1%}")
        
    except Exception as e:
        print(f"     ‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π merger
    print("   üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
    try:
        from improved_polygon_merger import ImprovedPolygonMerger
        from data_structures import Prediction, Coords, Box
        
        merger = ImprovedPolygonMerger()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        test_predictions = [
            Prediction(
                class_name="lp",
                box=Box(start=Coords(x=0, y=0), end=Coords(x=10, y=10)),
                conf=0.9,
                polygon=[Coords(x=0, y=0), Coords(x=10, y=0), Coords(x=10, y=10), Coords(x=0, y=10)]
            )
        ]
        
        merged = merger.merge_predictions(test_predictions)
        
        print(f"     ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(merged)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
    except Exception as e:
        print(f"     ‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_specific_features()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline
    success = test_improved_pipeline()
    
    if success:
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—É—á—à—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        print(f"   - –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º pipeline")
        print(f"   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print(f"   - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –∫ –º–æ–¥–µ–ª—è–º")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU/CPU —Ä–µ—Å—É—Ä—Å–æ–≤")

if __name__ == "__main__":
    main()
