#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–ª–æ—â–∞–¥–∏.
"""

import json
import numpy as np
from shapely.geometry import Polygon
import matplotlib.pyplot as plt
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from adaptive_polygon_simplifier import AdaptivePolygonSimplifier

def load_predictions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('results/predictions.json', 'r') as f:
            data = json.load(f)
        return data['predictions']
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        return []

def analyze_polygon_with_improved_algorithm(polygon_coords, class_name="unknown"):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–∏–≥–æ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    if not polygon_coords or len(polygon_coords) < 3:
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º Shapely –ø–æ–ª–∏–≥–æ–Ω
        coords = [(p['x'], p['y']) for p in polygon_coords]
        original_polygon = Polygon(coords)
        
        if not original_polygon.is_valid:
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        simplifier = AdaptivePolygonSimplifier()
        simplified_polygon, metrics = simplifier.simplify_polygon(original_polygon)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        original_metrics = simplifier.calculate_polygon_metrics(original_polygon)
        simplified_metrics = simplifier.calculate_polygon_metrics(simplified_polygon)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
        problems = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
        if metrics['area_preserved'] < 0.95:
            problems.append('area_loss')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è
        if metrics['simplified_points'] > 100:
            problems.append('too_many_points')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
        if metrics['original_points'] < 6:
            problems.append('too_few_original_points')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°–∏–ª—å–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        if abs(metrics['area_preserved'] - 1.0) > 0.1:
            problems.append('shape_distortion')
        
        return {
            'class_name': class_name,
            'original_points': metrics['original_points'],
            'simplified_points': metrics['simplified_points'],
            'area_preserved': metrics['area_preserved'],
            'perimeter_preserved': metrics['perimeter_preserved'],
            'method': metrics['method'],
            'complexity': metrics['complexity'],
            'problems': problems,
            'is_problematic': len(problems) > 0,
            'original_metrics': original_metrics,
            'simplified_metrics': simplified_metrics
        }
        
    except Exception as e:
        return {
            'error': str(e),
            'is_problematic': True
        }

def compare_algorithms(polygon_coords, class_name="unknown"):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º—ã"""
    if not polygon_coords or len(polygon_coords) < 3:
        return None
    
    try:
        coords = [(p['x'], p['y']) for p in polygon_coords]
        original_polygon = Polygon(coords)
        
        if not original_polygon.is_valid:
            return None
        
        # –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–∏–∑ pipeline)
        old_simplified = old_simplify_polygon(original_polygon)
        old_metrics = {
            'points': len(old_simplified.exterior.coords),
            'area_preserved': old_simplified.area / original_polygon.area,
            'perimeter_preserved': old_simplified.length / original_polygon.length
        }
        
        # –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        simplifier = AdaptivePolygonSimplifier()
        new_simplified, new_metrics = simplifier.simplify_polygon(original_polygon)
        
        return {
            'class_name': class_name,
            'original_points': len(original_polygon.exterior.coords),
            'old_algorithm': old_metrics,
            'new_algorithm': {
                'points': new_metrics['simplified_points'],
                'area_preserved': new_metrics['area_preserved'],
                'perimeter_preserved': new_metrics['perimeter_preserved'],
                'method': new_metrics['method']
            },
            'improvement': {
                'area_preservation_gain': new_metrics['area_preserved'] - old_metrics['area_preserved'],
                'points_reduction_old': (len(original_polygon.exterior.coords) - old_metrics['points']) / len(original_polygon.exterior.coords),
                'points_reduction_new': (len(original_polygon.exterior.coords) - new_metrics['simplified_points']) / len(original_polygon.exterior.coords)
            }
        }
        
    except Exception as e:
        return {'error': str(e)}

def old_simplify_polygon(polygon, max_points=60):
    """–°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø—Ä–æ—â–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ pipeline)"""
    try:
        current_points = len(polygon.exterior.coords)
        
        if current_points <= max_points:
            return polygon
        
        min_tolerance = 0.1
        max_tolerance = 10.0
        best_poly = polygon
        
        for _ in range(10):
            tolerance = (min_tolerance + max_tolerance) / 2
            simplified = polygon.simplify(tolerance, preserve_topology=True)
            
            if simplified.is_valid and len(simplified.exterior.coords) > 3:
                points_count = len(simplified.exterior.coords)
                
                if points_count <= max_points:
                    best_poly = simplified
                    min_tolerance = tolerance
                    if points_count >= max_points * 0.8:
                        break
                else:
                    max_tolerance = tolerance
            else:
                max_tolerance = tolerance
        
        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(best_poly.exterior.coords) > max_points:
            coords = list(best_poly.exterior.coords)
            step = len(coords) / max_points
            sampled_coords = []
            
            for i in range(max_points):
                idx = int(i * step) % len(coords)
                sampled_coords.append(coords[idx])
            
            try:
                best_poly = Polygon(sampled_coords)
                if not best_poly.is_valid:
                    best_poly = polygon
            except:
                best_poly = polygon
        
        return best_poly
        
    except Exception as e:
        return polygon

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = load_predictions()
    if not predictions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    print("\nüîß –ê–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º:")
    new_results = []
    new_problematic = []
    
    for i, pred in enumerate(predictions[:100]):  # –ü–µ—Ä–≤—ã–µ 100
        if 'polygon' not in pred or not pred['polygon']:
            continue
            
        class_name = pred.get('class_name', 'unknown')
        result = analyze_polygon_with_improved_algorithm(pred['polygon'], class_name)
        
        if result and not result.get('error'):
            new_results.append(result)
            if result.get('is_problematic', False):
                new_problematic.append(result)
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π {i} ({class_name}):")
                print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {result['original_points']}")
                print(f"   –ü–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è: {result['simplified_points']}")
                print(f"   –ü–ª–æ—â–∞–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result['area_preserved']:.1%}")
                print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {result['problems']}")
                print()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    print("\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:")
    comparison_results = []
    
    for i, pred in enumerate(predictions[:50]):  # –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if 'polygon' not in pred or not pred['polygon']:
            continue
            
        class_name = pred.get('class_name', 'unknown')
        comparison = compare_algorithms(pred['polygon'], class_name)
        
        if comparison and not comparison.get('error'):
            comparison_results.append(comparison)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(new_results)}")
    print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {len(new_problematic)}")
    
    if new_results:
        area_preserved = [r['area_preserved'] for r in new_results]
        points_reduction = [(r['original_points'] - r['simplified_points']) / r['original_points'] * 100 for r in new_results]
        
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {np.mean(area_preserved):.1%}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {np.min(area_preserved):.1%}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫: {np.mean(points_reduction):.1f}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {np.max(points_reduction):.1f}%")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—Ç–∞—Ä—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    if comparison_results:
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—Ç–∞—Ä—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º:")
        area_gains = [c['improvement']['area_preservation_gain'] for c in comparison_results]
        print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏: {np.mean(area_gains):.1%}")
        print(f"   –°–ª—É—á–∞–µ–≤ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º: {sum(1 for g in area_gains if g > 0)}/{len(area_gains)}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_stats = {}
    for result in new_results:
        class_name = result['class_name']
        if class_name not in class_stats:
            class_stats[class_name] = {'total': 0, 'problematic': 0, 'avg_area_preserved': []}
        
        class_stats[class_name]['total'] += 1
        class_stats[class_name]['avg_area_preserved'].append(result['area_preserved'])
        if result.get('is_problematic', False):
            class_stats[class_name]['problematic'] += 1
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_name, stats in class_stats.items():
        problematic_pct = stats['problematic'] / stats['total'] * 100
        avg_area = np.mean(stats['avg_area_preserved'])
        print(f"   {class_name}: {stats['total']} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, {problematic_pct:.1f}% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö, {avg_area:.1%} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if len(new_problematic) > len(new_results) * 0.05:  # –ë–æ–ª–µ–µ 5% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
        print("   ‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    else:
        print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ!")
        print("   üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π pipeline")

if __name__ == "__main__":
    main()
