#!/usr/bin/env python3
"""
üß¨ –ï–¥–∏–Ω—ã–π Workflow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–æ–ø—Å–∏—è–º–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å –±–∏–æ–ø—Å–∏—è–º–∏:
1. –î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π
2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
3. –í—ã–±–æ—Ä –±–∏–æ–ø—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏

–ê–≤—Ç–æ—Ä: WSIYOLO Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import json
import argparse
from pathlib import Path
import subprocess

def run_biopsy_detection(wsi_path, output_dir="biopsy_results"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –±–∏–æ–ø—Å–∏–π"""
    print("üîç –≠—Ç–∞–ø 1: –î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π")
    print("-" * 30)
    
    cmd = [
        "python", "detect_biopsies.py",
        "--wsi-path", wsi_path,
        "--output-dir", output_dir,
        "--n-biopsies", "6"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∏–æ–ø—Å–∏–π: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False

def create_numbered_grid(results_path, output_dir="biopsy_results"):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É –±–∏–æ–ø—Å–∏–π"""
    print("\nüî¢ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏")
    print("-" * 40)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        with open(results_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        biopsy_regions = data["biopsy_detection"]["biopsy_regions"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        def distance_from_origin(biopsy):
            center_x = (biopsy["x_min"] + biopsy["x_max"]) / 2
            center_y = (biopsy["y_min"] + biopsy["y_max"]) / 2
            return (center_x ** 2 + center_y ** 2) ** 0.5
        
        sorted_biopsies = sorted(biopsy_regions, key=distance_from_origin)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É
        numbered_biopsies = []
        for i, biopsy in enumerate(sorted_biopsies, 1):
            numbered_biopsy = {
                "grid_id": i,
                "original_id": biopsy["id"],
                "name": f"–ë–∏–æ–ø—Ç–∞—Ç {i} (—Å–µ—Ç–∫–∞)",
                "center": [
                    (biopsy["x_min"] + biopsy["x_max"]) / 2,
                    (biopsy["y_min"] + biopsy["y_max"]) / 2
                ],
                "distance": distance_from_origin(biopsy),
                "region": biopsy
            }
            numbered_biopsies.append(numbered_biopsy)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏
        grid_config = {
            "biopsy_grid": {
                "total_biopsies": len(numbered_biopsies),
                "numbered_biopsies": numbered_biopsies
            },
            "selection_options": {
                "closest_to_origin": 1,
                "available_ids": list(range(1, len(numbered_biopsies) + 1)),
                "default_selection": 1
            }
        }
        
        grid_path = os.path.join(output_dir, "biopsy_grid_config.json")
        with open(grid_path, 'w', encoding='utf-8') as f:
            json.dump(grid_config, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {grid_path}")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –±–∏–æ–ø—Å–∏–π: {len(numbered_biopsies)}")
        
        return grid_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: {e}")
        return None

def select_biopsy_for_processing(biopsy_id, grid_path, output_dir="biopsy_results"):
    """–í—ã–±–∏—Ä–∞–µ—Ç –±–∏–æ–ø—Å–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print(f"\nüéØ –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –±–∏–æ–ø—Å–∏–∏ {biopsy_id}")
    print("-" * 35)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏
        with open(grid_path, 'r', encoding='utf-8') as f:
            grid_data = json.load(f)
        
        numbered_biopsies = grid_data["biopsy_grid"]["numbered_biopsies"]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–∏–æ–ø—Å–∏—é
        selected_biopsy = None
        for biopsy in numbered_biopsies:
            if biopsy["grid_id"] == biopsy_id:
                selected_biopsy = biopsy
                break
        
        if not selected_biopsy:
            print(f"‚ùå –ë–∏–æ–ø—Å–∏—è {biopsy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_config = {
            "selected_biopsy": selected_biopsy,
            "processing_region": selected_biopsy["region"],
            "grid_info": {
                "total_biopsies": len(numbered_biopsies),
                "selected_id": biopsy_id
            }
        }
        
        config_path = os.path.join(output_dir, f"selected_biopsy_{biopsy_id}_config.json")
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(processing_config, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ë–∏–æ–ø—Å–∏—è {biopsy_id} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"üìç –†–µ–≥–∏–æ–Ω: ({selected_biopsy['region']['x_min']}, {selected_biopsy['region']['y_min']}) - ({selected_biopsy['region']['x_max']}, {selected_biopsy['region']['y_max']})")
        print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")
        
        return config_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∏–æ–ø—Å–∏–∏: {e}")
        return None

def run_biopsy_processing(biopsy_id, wsi_path, config_path, output_dir="biopsy_results"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏–æ–ø—Å–∏–∏"""
    print(f"\nüöÄ –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–ø—Å–∏–∏ {biopsy_id}")
    print("-" * 40)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        biopsy_region = config["selected_biopsy"]["region"]
        
        print(f"üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω:")
        print(f"   X: {biopsy_region['x_min']} - {biopsy_region['x_max']}")
        print(f"   Y: {biopsy_region['y_min']} - {biopsy_region['y_max']}")
        print(f"   –†–∞–∑–º–µ—Ä: {biopsy_region['width']} x {biopsy_region['height']}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º pipeline
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        processing_results = {
            "biopsy_id": biopsy_id,
            "region": biopsy_region,
            "status": "ready_for_processing",
            "message": "–ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º pipeline"
        }
        
        results_path = os.path.join(output_dir, f"biopsy_{biopsy_id}_processing_results.json")
        with open(results_path, 'w', encoding='utf-8') as f:
            json.dump(processing_results, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–ø—Å–∏–∏ {biopsy_id} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_path}")
        
        return results_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–æ–ø—Å–∏–∏: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="–ï–¥–∏–Ω—ã–π workflow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–æ–ø—Å–∏—è–º–∏")
    parser.add_argument("--wsi-path", required=True, help="–ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É")
    parser.add_argument("--biopsy-id", type=int, default=1, help="ID –±–∏–æ–ø—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1-6)")
    parser.add_argument("--output-dir", default="biopsy_results", help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--skip-detection", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é (–µ—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
    
    args = parser.parse_args()
    
    print("üß¨ –ï–¥–∏–Ω—ã–π Workflow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–æ–ø—Å–∏—è–º–∏")
    print("=" * 50)
    print(f"üìÅ WSI: {args.wsi_path}")
    print(f"üéØ –ë–∏–æ–ø—Å–∏—è: {args.biopsy_id}")
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {args.output_dir}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(args.output_dir, exist_ok=True)
    
    # –≠—Ç–∞–ø 1: –î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π
    if not args.skip_detection:
        if not run_biopsy_detection(args.wsi_path, args.output_dir):
            print("‚ùå –î–µ—Ç–µ–∫—Ü–∏—è –±–∏–æ–ø—Å–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
    
    # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
    results_path = os.path.join(args.output_dir, "biopsy_detection_results.json")
    if not os.path.exists(results_path):
        print(f"‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_path}")
        return False
    
    grid_path = create_numbered_grid(results_path, args.output_dir)
    if not grid_path:
        print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    # –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –±–∏–æ–ø—Å–∏–∏
    config_path = select_biopsy_for_processing(args.biopsy_id, grid_path, args.output_dir)
    if not config_path:
        print("‚ùå –í—ã–±–æ—Ä –±–∏–æ–ø—Å–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è")
        return False
    
    # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–ø—Å–∏–∏
    processing_path = run_biopsy_processing(args.biopsy_id, args.wsi_path, config_path, args.output_dir)
    if not processing_path:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–ø—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    print("\nüéâ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {args.output_dir}")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
