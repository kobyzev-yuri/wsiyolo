#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö WSI —Ñ–∞–π–ª–æ–≤ –∏ —Å–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –≤—Å–µ–º –º–µ—Ç–∫–∞–º.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ wsi_name.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ WSI.
"""

import sys
import os
import json
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.wsi_yolo_pipeline import WSIYOLOPipeline, create_models_config


def process_all_wsi(wsi_dir: str = "wsi", models_dir: str = "models", 
                   results_dir: str = "results", max_patches: int = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ WSI —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        wsi_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å WSI —Ñ–∞–π–ª–∞–º–∏
        models_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        max_patches: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—á–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    
    print("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö WSI —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(wsi_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è WSI –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {wsi_dir}")
        return False
    
    if not os.path.exists(models_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs(results_dir, exist_ok=True)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...")
        models_config = create_models_config(models_dir)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_config)}")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline...")
        pipeline = WSIYOLOPipeline(
            models_config=models_config,
            tile_size=512,
            overlap_ratio=0.5,
            iou_threshold=0.5
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ WSI —Ñ–∞–π–ª—ã
        wsi_files = []
        for ext in ['*.tiff', '*.tif', '*.svs', '*.ndpi']:
            wsi_files.extend(Path(wsi_dir).glob(ext))
        
        if not wsi_files:
            print(f"‚ùå WSI —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {wsi_dir}")
            return False
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ WSI —Ñ–∞–π–ª–æ–≤: {len(wsi_files)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π WSI
        all_results = {}
        
        for i, wsi_file in enumerate(wsi_files, 1):
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ WSI {i}/{len(wsi_files)}: {wsi_file.name}")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WSI
                predictions = pipeline.process_wsi(
                    str(wsi_file), 
                    None,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    max_patches
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = pipeline.get_statistics(predictions)
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                wsi_name = wsi_file.stem
                result_file = f"{wsi_name}.json"
                result_path = os.path.join(results_dir, result_file)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                result_data = {
                    'wsi_info': {
                        'path': str(wsi_file),
                        'name': wsi_name,
                        'file': wsi_file.name
                    },
                    'processing_info': {
                        'models_used': len(models_config),
                        'max_patches': max_patches,
                        'tile_size': 512,
                        'overlap_ratio': 0.5
                    },
                    'statistics': stats,
                    'label_statistics': stats['by_class'],  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º
                    'predictions': []
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                for pred in predictions:
                    pred_data = {
                        'class_name': pred.class_name,
                        'confidence': pred.conf,
                        'box': {
                            'start': {'x': pred.box.start.x, 'y': pred.box.start.y},
                            'end': {'x': pred.box.end.x, 'y': pred.box.end.y}
                        }
                    }
                    
                    if pred.polygon:
                        pred_data['polygon'] = [
                            {'x': p.x, 'y': p.y} for p in pred.polygon
                        ]
                    
                    result_data['predictions'].append(pred_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with open(result_path, 'w', encoding='utf-8') as f:
                    json.dump(result_data, f, indent=2, ensure_ascii=False)
                
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total']} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                print(f"   üìä –ü–æ –º–µ—Ç–∫–∞–º: {stats['by_class']}")
                print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result_file}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                all_results[wsi_name] = {
                    'file': wsi_file.name,
                    'predictions_count': stats['total'],
                    'label_statistics': stats['by_class'],  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º
                    'avg_confidence': stats['average_confidence']
                }
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {wsi_file.name}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        summary_file = os.path.join(results_dir, "processing_summary.json")
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(all_results, f, indent=2, ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–∫–∞–º
        total_label_stats = {}
        for result in all_results.values():
            for label, count in result['label_statistics'].items():
                if label not in total_label_stats:
                    total_label_stats[label] = 0
                total_label_stats[label] += count
        
        print(f"\nüìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ WSI: {len(all_results)}")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {sum(r['predictions_count'] for r in all_results.values())}")
        print(f"   üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º:")
        for label, count in sorted(total_label_stats.items()):
            print(f"      {label}: {count}")
        print(f"   –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_file}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–≤–æ–¥–∫—É
        all_results['_summary'] = {
            'total_wsi': len(all_results),
            'total_predictions': sum(r['predictions_count'] for r in all_results.values()),
            'total_label_statistics': total_label_stats
        }
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    wsi_dir = "wsi"
    models_dir = "models"
    results_dir = "results"
    max_patches = None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å WSI
    
    print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   WSI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {wsi_dir}")
    print(f"   –ú–æ–¥–µ–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {models_dir}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {results_dir}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ç—á–µ–π: {max_patches}")
    
    success = process_all_wsi(wsi_dir, models_dir, results_dir, max_patches)
    
    if success:
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
