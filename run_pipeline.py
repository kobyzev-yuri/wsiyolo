#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ WSI YOLO Pipeline
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.wsi_yolo_pipeline import WSIYOLOPipeline, create_models_config


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pipeline"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ WSI YOLO Pipeline")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    models_dir = "models"
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    output_path = "results/predictions.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(models_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
        return False
    
    if not os.path.exists(wsi_path):
        print(f"‚ùå WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_path}")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...")
        models_config = create_models_config(models_dir)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_config)}")
        
        for config in models_config:
            print(f"   - {config['model_path']}: {config['window_size']}x{config['window_size']}, conf={config['min_conf']}")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline...")
        pipeline = WSIYOLOPipeline(
            models_config=models_config,
            tile_size=512,
            overlap_ratio=0.5,
            iou_threshold=0.5
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WSI
        print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ WSI: {wsi_path}")
        predictions = pipeline.process_wsi(wsi_path, output_path)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = pipeline.get_statistics(predictions)
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['total']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['average_confidence']:.3f}")
        print(f"   –ü–æ –∫–ª–∞—Å—Å–∞–º: {stats['by_class']}")
        
        if stats['total'] > 0:
            print(f"\n‚úÖ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
        else:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

