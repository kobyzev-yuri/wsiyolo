#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞ —Å –∫–ª—é—á–æ–º --biopsy-id
"""

import argparse
import json
import sys
import os
from pathlib import Path

def load_biopsy_config(biopsy_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞"""
    
    config_file = f"selected_biopsy_{biopsy_id}_config.json"
    
    if not os.path.exists(config_file):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–æ–ø—Ç–∞—Ç–∞ {biopsy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python select_biopsy_for_processing.py --biopsy-id {biopsy_id}")
        return None
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def run_improved_pipeline_with_biopsy(biopsy_id, wsi_path, output_dir):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π pipeline –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞"""
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline –¥–ª—è –±–∏–æ–ø—Ç–∞—Ç–∞ {biopsy_id}")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∏–æ–ø—Ç–∞—Ç–∞
    config = load_biopsy_config(biopsy_id)
    if not config:
        return False
    
    selected_biopsy = config['selected_biopsy']
    processing_region = config['processing_region']
    
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–æ–ø—Ç–∞—Ç–∞:")
    print(f"   ID: {selected_biopsy['grid_id']}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {selected_biopsy['name']}")
    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({processing_region['x_min']:,}, {processing_region['y_min']:,}) - ({processing_region['x_max']:,}, {processing_region['y_max']:,})")
    print(f"   –†–∞–∑–º–µ—Ä: {processing_region['width']}x{processing_region['height']}")
    print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {config['optimization']['speedup_factor']} —Ä–∞–∑")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π pipeline
    try:
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        from improved_wsi_yolo_pipeline import ImprovedWSIYOLOPipeline
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è pipeline
    pipeline_config = {
        "wsi_path": wsi_path,
        "output_dir": output_dir,
        "biopsy_region": processing_region,
        "models": {
            "lp": "models/lp.pt",
            "mild": "models/mild.pt", 
            "moderate": "models/moderate.pt"
        },
        "performance": {
            "batch_size": 16,
            "max_workers": 4,
            "device": "cuda"
        },
        "optimization": {
            "process_only_biopsy": True,
            "biopsy_id": biopsy_id,
            "speedup_factor": config['optimization']['speedup_factor']
        }
    }
    
    print(f"\nüîß –ó–∞–ø—É—Å–∫ pipeline...")
    print(f"   WSI: {wsi_path}")
    print(f"   –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
    print(f"   –û–±–ª–∞—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: –±–∏–æ–ø—Ç–∞—Ç {biopsy_id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = ImprovedWSIYOLOPipeline(
            batch_size=pipeline_config['performance']['batch_size'],
            max_workers=pipeline_config['performance']['max_workers'],
            device=pipeline_config['performance']['device']
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        results = pipeline.process_wsi(
            wsi_path=wsi_path,
            output_dir=output_dir,
            biopsy_region=processing_region
        )
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(results.get('predictions', []))}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('processing_time', 'N/A')}")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {config['optimization']['speedup_factor']} —Ä–∞–∑")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–æ–ø—Ç–∞—Ç–∞"""
    
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞')
    parser.add_argument('--biopsy-id', type=int, required=True, help='ID –±–∏–æ–ø—Ç–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1-6)')
    parser.add_argument('--wsi-path', default='wsi/19_ibd_mod_S037__20240822_091343.tiff', help='–ü—É—Ç—å –∫ WSI —Ñ–∞–π–ª—É')
    parser.add_argument('--output-dir', default=f'results_biopsy_', help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = f"{args.output_dir}{args.biopsy_id}"
    
    print("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞")
    print("=" * 50)
    print(f"üîß –ë–∏–æ–ø—Ç–∞—Ç ID: {args.biopsy_id}")
    print(f"üìÅ WSI: {args.wsi_path}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WSI
    if not os.path.exists(args.wsi_path):
        print(f"‚ùå WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.wsi_path}")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    success = run_improved_pipeline_with_biopsy(args.biopsy_id, args.wsi_path, output_dir)
    
    if success:
        print(f"\nüéØ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
        print("=" * 30)
        print(f"1. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∏–æ–ø—Ç–∞—Ç ID {args.biopsy_id}")
        print(f"2. üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output_dir}")
        print(f"3. üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 6 —Ä–∞–∑")
        print(f"4. üìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ WSI")
        return 0
    else:
        print(f"\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        return 1

if __name__ == "__main__":
    sys.exit(main())
