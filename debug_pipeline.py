#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ pipeline
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.wsi_yolo_pipeline import WSIYOLOPipeline, create_models_config


def debug_pipeline():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø pipeline"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ WSI YOLO Pipeline")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    models_dir = "models"
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        models_config = create_models_config(models_dir)
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_config)}")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = WSIYOLOPipeline(
            models_config=models_config,
            tile_size=512,
            overlap_ratio=0.5,
            iou_threshold=0.5
        )
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WSI
        print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ WSI...")
        wsi_info = pipeline.patch_loader.load_wsi_info(wsi_path)
        print(f"   –†–∞–∑–º–µ—Ä: {wsi_info.width}x{wsi_info.height}")
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—á–∏ (—Ç–æ–ª—å–∫–æ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        print("\nüîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π...")
        patches = pipeline.patch_loader.extract_patches(wsi_path, max_patches=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—á–µ–π: {len(patches)}")
        
        if not patches:
            print("‚ùå –ü–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—á –æ—Ç–¥–µ–ª—å–Ω–æ
        print("\nü§ñ –û—Ç–ª–∞–¥–∫–∞ YOLO –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
        all_predictions = []
        
        for i, patch in enumerate(patches):
            print(f"\n   –ü–∞—Ç—á {i+1}: ID={patch.patch_id}, –ø–æ–∑–∏—Ü–∏—è=({patch.x},{patch.y})")
            print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {patch.image.shape}")
            print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {patch.image.dtype}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {patch.image.min()} - {patch.image.max()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
            for model_path, model_data in pipeline.yolo_inference.loaded_models.items():
                model = model_data['model']
                config = model_data['config']
                class_names = model_data['class_names']
                
                print(f"   üîç –ú–æ–¥–µ–ª—å: {Path(model_path).name}")
                print(f"      –ö–ª–∞—Å—Å—ã: {list(class_names.values())}")
                print(f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config.min_conf}")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    results = model(patch.image, conf=config.min_conf, verbose=False)
                    
                    print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(results)}")
                    
                    for j, result in enumerate(results):
                        if result.boxes is not None:
                            boxes = result.boxes.xyxy.cpu().numpy()
                            confidences = result.boxes.conf.cpu().numpy()
                            class_ids = result.boxes.cls.cpu().numpy().astype(int)
                            
                            print(f"         –†–µ–∑—É–ª—å—Ç–∞—Ç {j+1}: {len(boxes)} –¥–µ—Ç–µ–∫—Ü–∏–π")
                            
                            for k, (box, conf, class_id) in enumerate(zip(boxes, confidences, class_ids)):
                                class_name = class_names.get(class_id, f"class_{class_id}")
                                print(f"            {k+1}. {class_name}: conf={conf:.3f}, box={box}")
                                
                                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                                from src.data_structures import Coords, Box, Prediction
                                
                                x1, y1, x2, y2 = box
                                absolute_box = Box(
                                    start=Coords(x=patch.x + x1, y=patch.y + y1),
                                    end=Coords(x=patch.x + x2, y=patch.y + y2)
                                )
                                
                                prediction = Prediction(
                                    class_name=class_name,
                                    box=absolute_box,
                                    conf=float(conf),
                                    polygon=None
                                )
                                
                                all_predictions.append(prediction)
                        else:
                            print(f"         –†–µ–∑—É–ª—å—Ç–∞—Ç {j+1}: –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π")
                
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(all_predictions)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        for i, pred in enumerate(all_predictions):
            print(f"   {i+1}. {pred.class_name}: conf={pred.conf:.3f}")
            print(f"      Box: ({pred.box.start.x:.1f}, {pred.box.start.y:.1f}) - ({pred.box.end.x:.1f}, {pred.box.end.y:.1f})")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        if all_predictions:
            print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
            merged_predictions = pipeline.polygon_merger.merge_predictions(all_predictions)
            print(f"   –ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(merged_predictions)}")
            
            for i, pred in enumerate(merged_predictions):
                print(f"   {i+1}. {pred.class_name}: conf={pred.conf:.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = debug_pipeline()
    sys.exit(0 if success else 1)


