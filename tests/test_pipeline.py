#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è WSI YOLO pipeline
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.main import WSIYOLOPipeline, create_models_config


def test_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç pipeline —Å –∏–º–µ—é—â–∏–º–∏—Å—è –º–æ–¥–µ–ª—è–º–∏ –∏ WSI"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WSI YOLO Pipeline")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    models_dir = "models"
    wsi_path = "wsi/19_ibd_mod_S037__20240822_091343.tiff"
    
    if not os.path.exists(models_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
        return False
    
    if not os.path.exists(wsi_path):
        print(f"‚ùå WSI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_path}")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...")
        models_config = create_models_config(models_dir)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_config)}")
        
        for config in models_config:
            print(f"   - {config['model_path']}: {config['window_size']}x{config['window_size']}, conf={config['min_conf']}")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline...")
        pipeline = WSIYOLOPipeline(
            models_config=models_config,
            tile_size=512,
            overlap_ratio=0.5,
            iou_threshold=0.5
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É WSI
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ WSI...")
        wsi_info = pipeline.wsi_pipeline.load_wsi(wsi_path)
        print(f"   –†–∞–∑–º–µ—Ä: {wsi_info.width}x{wsi_info.height}")
        print(f"   –£—Ä–æ–≤–Ω–∏: {wsi_info.levels}")
        print(f"   MPP: {wsi_info.mpp}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10)
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—á–µ–π...")
        patches = pipeline.wsi_pipeline.extract_patches(wsi_path)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—á–µ–π: {len(patches)}")
        
        if patches:
            print(f"   –ü–µ—Ä–≤—ã–π –ø–∞—Ç—á: {patches[0].patch_id}, –ø–æ–∑–∏—Ü–∏—è: ({patches[0].x}, {patches[0].y})")
            print(f"   –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞: {patches[0].image.shape}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º YOLO inference (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–∞—Ç—á–µ)
        if patches:
            print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YOLO inference...")
            first_patch = patches[0]
            predictions = pipeline.yolo_inference.predict_patch(first_patch)
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–∞—Ç—á–µ: {len(predictions)}")
            
            for pred in predictions:
                print(f"   - {pred.class_name}: conf={pred.conf:.3f}, box=({pred.box.start.x:.0f},{pred.box.start.y:.0f})-({pred.box.end.x:.0f},{pred.box.end.y:.0f})")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_pipeline()
    sys.exit(0 if success else 1)

