#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
"""

import numpy as np
from skimage import measure
from shapely.geometry import Polygon
from shapely.ops import unary_union

def smart_simplify_polygon(polygon, max_points=60):
    """–£–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫"""
    try:
        current_poly = polygon
        current_points = len(current_poly.exterior.coords)
        
        if current_points <= max_points:
            return current_poly
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º tolerance
        min_tolerance = 0.1
        max_tolerance = 10.0
        best_poly = current_poly
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ tolerance
        for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
            tolerance = (min_tolerance + max_tolerance) / 2
            simplified = current_poly.simplify(tolerance, preserve_topology=True)
            
            if simplified.is_valid and len(simplified.exterior.coords) > 3:
                points_count = len(simplified.exterior.coords)
                
                if points_count <= max_points:
                    # –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    best_poly = simplified
                    min_tolerance = tolerance
                    if points_count >= max_points * 0.8:  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
                        break
                else:
                    # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–ø—Ä–æ—â–µ–Ω–∏—è
                    max_tolerance = tolerance
            else:
                # –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ
                max_tolerance = tolerance
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É
        if len(best_poly.exterior.coords) > max_points:
            coords = list(best_poly.exterior.coords)
            step = len(coords) // max_points
            sampled_coords = coords[::max(1, step)]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
            if len(sampled_coords) >= 3:
                sampled_poly = Polygon(sampled_coords)
                if sampled_poly.is_valid:
                    best_poly = sampled_poly
        
        return best_poly
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è: {e}")
        return polygon

def test_polygon_simplification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é –º–∞—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –¥–∞—Ç—å –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫
    mask = np.zeros((512, 512), dtype=np.float32)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Ñ–æ—Ä–º—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π
    for i in range(100, 400):
        for j in range(100, 400):
            if (i - 250)**2 + (j - 250)**2 < 10000:  # –ö—Ä—É–≥
                mask[i, j] = 1.0
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
                if (i + j) % 3 == 0:
                    mask[i, j] = 0.8
                if (i * j) % 5 == 0:
                    mask[i, j] = 0.9
    
    print(f"   –†–∞–∑–º–µ—Ä –º–∞—Å–∫–∏: {mask.shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
    contours = measure.find_contours(mask, 0.5)
    if contours:
        largest_contour = max(contours, key=len)
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: {len(largest_contour)} —Ç–æ—á–µ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
        coords = [(p[1], p[0]) for p in largest_contour]
        poly = Polygon(coords)
        
        if poly.is_valid:
            print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(poly.exterior.coords)} —Ç–æ—á–µ–∫, –ø–µ—Ä–∏–º–µ—Ç—Ä: {poly.length:.1f}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–æ 60 —Ç–æ—á–µ–∫
            simplified = smart_simplify_polygon(poly, max_points=60)
            print(f"   –£–º–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(simplified.exterior.coords)} —Ç–æ—á–µ–∫, –ø–µ—Ä–∏–º–µ—Ç—Ä: {simplified.length:.1f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —É–ø—Ä–æ—â–µ–Ω–∏—è
            area_ratio = simplified.area / poly.area
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {area_ratio:.3f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            points_ok = len(simplified.exterior.coords) <= 60
            area_ok = area_ratio > 0.8  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º 80% –ø–ª–æ—â–∞–¥–∏
            
            print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {'OK' if points_ok else 'FAIL'} ({len(simplified.exterior.coords)}/60)")
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {'OK' if area_ok else 'FAIL'} ({area_ratio:.3f})")
            
            return points_ok and area_ok
    
    return False

def test_merger_simplification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–∏–µ –≤ PolygonMerger"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –≤ PolygonMerger:")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    polygons = []
    for i in range(3):
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
        coords = []
        center_x, center_y = 100 + i * 200, 100 + i * 200
        for angle in np.linspace(0, 2*np.pi, 1000):
            x = center_x + 50 * np.cos(angle) + np.random.normal(0, 0.5)
            y = center_y + 50 * np.sin(angle) + np.random.normal(0, 0.5)
            coords.append((x, y))
        
        poly = Polygon(coords)
        if poly.is_valid:
            polygons.append(poly)
            print(f"   –ü–æ–ª–∏–≥–æ–Ω {i+1}: {len(poly.exterior.coords)} —Ç–æ—á–µ–∫")
    
    if len(polygons) >= 2:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
        merged = unary_union(polygons)
        print(f"   –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(merged.exterior.coords)} —Ç–æ—á–µ–∫")
        
        # –£–ø—Ä–æ—â–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(merged.exterior.coords) > 1000:
            simplified = merged.simplify(2.0, preserve_topology=True)
            print(f"   –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π: {len(simplified.exterior.coords)} —Ç–æ—á–µ–∫")
            return len(simplified.exterior.coords) < len(merged.exterior.coords)
    
    return True

def simulate_real_world_scenario():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –±–æ–ª—å—à–∏–º –ø–æ–ª–∏–≥–æ–Ω–æ–º"""
    
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
    mask = np.zeros((512, 512), dtype=np.float32)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Å —à—É–º–æ–º
    for i in range(50, 462):
        for j in range(50, 462):
            if 100 <= i <= 400 and 100 <= j <= 400:
                mask[i, j] = 1.0
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
                if (i + j) % 2 == 0:
                    mask[i, j] = 0.9
                if (i * j) % 3 == 0:
                    mask[i, j] = 0.8
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
    contours = measure.find_contours(mask, 0.5)
    
    if contours:
        largest_contour = max(contours, key=len)
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: {len(largest_contour)} —Ç–æ—á–µ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
        coords = [(p[1], p[0]) for p in largest_contour]
        poly = Polygon(coords)
        
        if poly.is_valid:
            print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(poly.exterior.coords)} —Ç–æ—á–µ–∫")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if len(poly.exterior.coords) > 1000:
                simplified = poly.simplify(1.0, preserve_topology=True)
                print(f"   –ü–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è (tolerance=1.0): {len(simplified.exterior.coords)} —Ç–æ—á–µ–∫")
                
                if len(simplified.exterior.coords) > 1000:
                    simplified = poly.simplify(2.0, preserve_topology=True)
                    print(f"   –ü–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏—è (tolerance=2.0): {len(simplified.exterior.coords)} —Ç–æ—á–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                area_ratio = simplified.area / poly.area
                print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {area_ratio:.3f}")
                
                return len(simplified.exterior.coords) < len(poly.exterior.coords)
    
    return False

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏\n")
    
    # –¢–µ—Å—Ç 1: –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    test1_passed = test_polygon_simplification()
    print(f"   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {'–ü–†–û–ô–î–ï–ù' if test1_passed else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –¢–µ—Å—Ç 2: –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤ –º–µ—Ä–∂–µ—Ä–µ
    test2_passed = test_merger_simplification()
    print(f"   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤ –º–µ—Ä–∂–µ—Ä–µ: {'–ü–†–û–ô–î–ï–ù' if test2_passed else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    test3_passed = simulate_real_world_scenario()
    print(f"   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {'–ü–†–û–ô–î–ï–ù' if test3_passed else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: 3")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {sum([test1_passed, test2_passed, test3_passed])}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {3 - sum([test1_passed, test2_passed, test3_passed])}")
    
    if all([test1_passed, test2_passed, test3_passed]):
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
