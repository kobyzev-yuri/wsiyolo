#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ background –∫–ª–∞—Å—Å–∞,
–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è lp –º–æ–¥–µ–ª–∏.
"""

import sys
import os
import numpy as np
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from data_structures import Prediction, Coords, Box
from improved_polygon_merger import ImprovedPolygonMerger


class ImprovedMergerTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞"""
        self.merger = ImprovedPolygonMerger(
            iou_threshold=0.7,
            min_area=50.0,
            min_polygon_points=8,
            lp_class_name="lp",
            background_class="background"
        )
    
    def create_test_predictions(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        predictions = []
        
        # 1. –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ lp –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions.extend(self._create_lp_predictions())
        
        # 2. Background –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)
        predictions.extend(self._create_background_predictions())
        
        # 3. –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã lp (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)
        predictions.extend(self._create_short_segments())
        
        # 4. –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã lp (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)
        predictions.extend(self._create_nested_objects())
        
        # 5. –î—Ä—É–≥–∏–µ –∫–ª–∞—Å—Å—ã
        predictions.extend(self._create_other_classes())
        
        return predictions
    
    def _create_lp_predictions(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ lp –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        predictions = []
        
        # LP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 1
        box1 = Box(
            start=Coords(x=100, y=100),
            end=Coords(x=200, y=200)
        )
        polygon1 = [
            Coords(x=100, y=100), Coords(x=200, y=100),
            Coords(x=200, y=200), Coords(x=100, y=200),
            Coords(x=120, y=120), Coords(x=180, y=120),
            Coords(x=180, y=180), Coords(x=120, y=180)
        ]
        
        pred1 = Prediction(
            class_name="lp",
            box=box1,
            conf=0.85,
            polygon=polygon1
        )
        predictions.append(pred1)
        
        # LP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 2 (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–µ—Å—è)
        box2 = Box(
            start=Coords(x=150, y=150),
            end=Coords(x=250, y=250)
        )
        polygon2 = [
            Coords(x=150, y=150), Coords(x=250, y=150),
            Coords(x=250, y=250), Coords(x=150, y=250),
            Coords(x=170, y=170), Coords(x=230, y=170),
            Coords(x=230, y=230), Coords(x=170, y=230)
        ]
        
        pred2 = Prediction(
            class_name="lp",
            box=box2,
            conf=0.90,
            polygon=polygon2
        )
        predictions.append(pred2)
        
        return predictions
    
    def _create_background_predictions(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç background –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)"""
        predictions = []
        
        # Background –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        box = Box(
            start=Coords(x=300, y=300),
            end=Coords(x=400, y=400)
        )
        polygon = [
            Coords(x=300, y=300), Coords(x=400, y=300),
            Coords(x=400, y=400), Coords(x=300, y=400)
        ]
        
        pred = Prediction(
            class_name="background",
            box=box,
            conf=0.95,
            polygon=polygon
        )
        predictions.append(pred)
        
        return predictions
    
    def _create_short_segments(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã lp (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)"""
        predictions = []
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç lp (4 —Ç–æ—á–∫–∏)
        box = Box(
            start=Coords(x=500, y=500),
            end=Coords(x=600, y=600)
        )
        polygon = [
            Coords(x=500, y=500), Coords(x=600, y=500),
            Coords(x=600, y=600), Coords(x=500, y=600)
        ]
        
        pred = Prediction(
            class_name="lp",
            box=box,
            conf=0.75,
            polygon=polygon
        )
        predictions.append(pred)
        
        # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç lp (3 —Ç–æ—á–∫–∏)
        box2 = Box(
            start=Coords(x=700, y=700),
            end=Coords(x=800, y=800)
        )
        polygon2 = [
            Coords(x=700, y=700), Coords(x=800, y=700),
            Coords(x=800, y=800)
        ]
        
        pred2 = Prediction(
            class_name="lp",
            box=box2,
            conf=0.70,
            polygon=polygon2
        )
        predictions.append(pred2)
        
        return predictions
    
    def _create_nested_objects(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã lp (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã)"""
        predictions = []
        
        # –ë–æ–ª—å—à–æ–π lp –æ–±—ä–µ–∫—Ç (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è)
        big_box = Box(
            start=Coords(x=900, y=900),
            end=Coords(x=1100, y=1100)
        )
        big_polygon = [
            Coords(x=900, y=900), Coords(x=1100, y=900),
            Coords(x=1100, y=1100), Coords(x=900, y=1100),
            Coords(x=920, y=920), Coords(x=1080, y=920),
            Coords(x=1080, y=1080), Coords(x=920, y=1080)
        ]
        
        big_pred = Prediction(
            class_name="lp",
            box=big_box,
            conf=0.88,
            polygon=big_polygon
        )
        predictions.append(big_pred)
        
        # –ú–∞–ª—ã–π lp –æ–±—ä–µ–∫—Ç –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–æ–≥–æ (–≤–ª–æ–∂–µ–Ω–Ω—ã–π - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω)
        small_box = Box(
            start=Coords(x=950, y=950),
            end=Coords(x=1050, y=1050)
        )
        small_polygon = [
            Coords(x=950, y=950), Coords(x=1050, y=950),
            Coords(x=1050, y=1050), Coords(x=950, y=1050),
            Coords(x=970, y=970), Coords(x=1030, y=970),
            Coords(x=1030, y=1030), Coords(x=970, y=1030)
        ]
        
        small_pred = Prediction(
            class_name="lp",
            box=small_box,
            conf=0.82,
            polygon=small_polygon
        )
        predictions.append(small_pred)
        
        return predictions
    
    def _create_other_classes(self) -> List[Prediction]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤"""
        predictions = []
        
        # Mild –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        box = Box(
            start=Coords(x=1200, y=1200),
            end=Coords(x=1300, y=1300)
        )
        polygon = [
            Coords(x=1200, y=1200), Coords(x=1300, y=1200),
            Coords(x=1300, y=1300), Coords(x=1200, y=1300)
        ]
        
        pred = Prediction(
            class_name="mild",
            box=box,
            conf=0.80,
            polygon=polygon
        )
        predictions.append(pred)
        
        # Moderate –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        box2 = Box(
            start=Coords(x=1400, y=1400),
            end=Coords(x=1500, y=1500)
        )
        polygon2 = [
            Coords(x=1400, y=1400), Coords(x=1500, y=1400),
            Coords(x=1500, y=1500), Coords(x=1400, y=1500)
        ]
        
        pred2 = Prediction(
            class_name="moderate",
            box=box2,
            conf=0.85,
            polygon=polygon2
        )
        predictions.append(pred2)
        
        return predictions
    
    def test_background_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é background –∫–ª–∞—Å—Å–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ background –∫–ª–∞—Å—Å–∞...")
        
        predictions = self._create_background_predictions()
        original_count = len(predictions)
        
        filtered = self.merger._filter_background_class(predictions)
        filtered_count = len(filtered)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {original_count}")
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_count}")
        
        assert filtered_count == 0, f"Background –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã: {filtered_count}"
        print("   ‚úÖ Background –∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω")
    
    def test_short_segments_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        predictions = self._create_short_segments()
        original_count = len(predictions)
        
        filtered = self.merger._filter_short_segments(predictions)
        filtered_count = len(filtered)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {original_count}")
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_count}")
        
        assert filtered_count == 0, f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã: {filtered_count}"
        print("   ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã")
    
    def test_nested_objects_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...")
        
        predictions = self._create_nested_objects()
        original_count = len(predictions)
        
        filtered = self.merger._filter_nested_objects(predictions)
        filtered_count = len(filtered)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {original_count}")
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_count}")
        
        # –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç (–±–æ–ª—å—à–æ–π)
        assert filtered_count == 1, f"–í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã: {filtered_count}"
        print("   ‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã")
    
    def test_improved_iou_filtering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é IoU —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (threshold=0.7)"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π IoU —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º IoU
        predictions = []
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 1
        box1 = Box(start=Coords(x=100, y=100), end=Coords(x=200, y=200))
        pred1 = Prediction(class_name="lp", box=box1, conf=0.9, polygon=None)
        predictions.append(pred1)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 2 —Å –≤—ã—Å–æ–∫–∏–º IoU (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–æ)
        box2 = Box(start=Coords(x=150, y=150), end=Coords(x=250, y=250))
        pred2 = Prediction(class_name="lp", box=box2, conf=0.8, polygon=None)
        predictions.append(pred2)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 3 —Å –Ω–∏–∑–∫–∏–º IoU (–¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è)
        box3 = Box(start=Coords(x=300, y=300), end=Coords(x=400, y=400))
        pred3 = Prediction(class_name="lp", box=box3, conf=0.7, polygon=None)
        predictions.append(pred3)
        
        original_count = len(predictions)
        filtered = self.merger.filter_by_improved_iou(predictions)
        filtered_count = len(filtered)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {original_count}")
        print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_count}")
        
        # –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (1 –∏ 3)
        assert filtered_count == 2, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è IoU —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {filtered_count}"
        print("   ‚úÖ IoU —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_complete_merger_pipeline(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        predictions = self.create_test_predictions()
        original_count = len(predictions)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {original_count}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π pipeline
        merged_predictions = self.merger.merge_predictions(predictions)
        merged_count = len(merged_predictions)
        
        print(f"   –ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merged_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.merger.get_filtering_statistics(predictions, merged_predictions)
        
        print(f"   –ò—Å–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['filtered_out']}")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {stats['filtering_ratio']:.2%}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ background –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω
        background_count = sum(1 for p in merged_predictions if p.class_name == "background")
        assert background_count == 0, f"Background –∫–ª–∞—Å—Å –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω: {background_count}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã lp –∏—Å–∫–ª—é—á–µ–Ω—ã
        short_lp_count = sum(1 for p in merged_predictions 
                           if p.class_name == "lp" and p.polygon and len(p.polygon) < 8)
        assert short_lp_count == 0, f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã lp –Ω–µ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã: {short_lp_count}"
        
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return stats
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("=" * 60)
        
        try:
            # –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è background –∫–ª–∞—Å—Å–∞
            self.test_background_filtering()
            print()
            
            # –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            self.test_short_segments_filtering()
            print()
            
            # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            self.test_nested_objects_filtering()
            print()
            
            # –¢–µ—Å—Ç 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è IoU —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            self.test_improved_iou_filtering()
            print()
            
            # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π pipeline
            stats = self.test_complete_merger_pipeline()
            print()
            
            print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print("-" * 40)
            print(f"–ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['total_original']}")
            print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {stats['total_filtered']}")
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–æ: {stats['filtered_out']}")
            print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {stats['filtering_ratio']:.2%}")
            
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = ImprovedMergerTester()
    tester.run_all_tests()


if __name__ == "__main__":
    main()
