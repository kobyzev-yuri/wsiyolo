#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞—Ç—á-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
"""

import sys
import time
import numpy as np
from pathlib import Path
from typing import List, Dict, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from data_structures import PatchInfo, Prediction, Coords, Box


class SimpleBatchTester:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–µ—Ä –±–∞—Ç—á-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, num_patches: int = 100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
        
        Args:
            num_patches: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—á–µ–π
        """
        self.num_patches = num_patches
        self.test_patches = self._create_test_patches()
        
    def _create_test_patches(self) -> List[PatchInfo]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—á–∏"""
        patches = []
        
        for i in range(self.num_patches):
            # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ç—á–∞
            patch_image = np.random.randint(0, 255, (512, 512, 3), dtype=np.uint8)
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = np.random.randint(0, 1000)
            y = np.random.randint(0, 1000)
            
            patch_info = PatchInfo(
                patch_id=i,
                x=x,
                y=y,
                size=512,
                image=patch_image,
                has_tissue=True
            )
            patches.append(patch_info)
        
        return patches
    
    def simulate_sequential_processing(self) -> Dict[str, Any]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        print("üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        start_time = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—á–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        total_predictions = 0
        for patch in self.test_patches:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ç—á–∞
            time.sleep(0.01)  # 10ms –Ω–∞ –ø–∞—Ç—á
            total_predictions += np.random.randint(1, 5)  # 1-4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –ø–∞—Ç—á
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        return {
            'method': 'sequential',
            'processing_time': processing_time,
            'total_predictions': total_predictions,
            'patches_processed': len(self.test_patches),
            'predictions_per_second': total_predictions / processing_time,
            'patches_per_second': len(self.test_patches) / processing_time
        }
    
    def simulate_batch_processing(self, batch_size: int = 16) -> Dict[str, Any]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        print(f"üîÑ –°–∏–º—É–ª—è—Ü–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (batch_size={batch_size})...")
        
        start_time = time.time()
        
        total_predictions = 0
        num_batches = (len(self.test_patches) + batch_size - 1) // batch_size
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞–º–∏
        for batch_idx in range(num_batches):
            batch_start = batch_idx * batch_size
            batch_end = min(batch_start + batch_size, len(self.test_patches))
            batch_patches = self.test_patches[batch_start:batch_end]
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ (–º–µ–Ω—å—à–µ —á–µ–º —Å—É–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—á–µ–π)
            batch_time = len(batch_patches) * 0.005  # 5ms –Ω–∞ –ø–∞—Ç—á –≤ –±–∞—Ç—á–µ
            time.sleep(batch_time)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∞
            batch_predictions = 0
            for patch in batch_patches:
                batch_predictions += np.random.randint(1, 5)
            total_predictions += batch_predictions
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        return {
            'method': f'batch_{batch_size}',
            'processing_time': processing_time,
            'total_predictions': total_predictions,
            'patches_processed': len(self.test_patches),
            'predictions_per_second': total_predictions / processing_time,
            'patches_per_second': len(self.test_patches) / processing_time,
            'batch_size': batch_size,
            'num_batches': num_batches
        }
    
    def simulate_parallel_model_processing(self, batch_size: int = 16) -> Dict[str, Any]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ–ª–µ–π"""
        print(f"üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ–ª–µ–π (batch_size={batch_size})...")
        
        start_time = time.time()
        
        total_predictions = 0
        num_batches = (len(self.test_patches) + batch_size - 1) // batch_size
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
        for batch_idx in range(num_batches):
            batch_start = batch_idx * batch_size
            batch_end = min(batch_start + batch_size, len(self.test_patches))
            batch_patches = self.test_patches[batch_start:batch_end]
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É 3 –º–æ–¥–µ–ª–µ–π
            # –í—Ä–µ–º—è = max(–≤—Ä–µ–º—è_–º–æ–¥–µ–ª–∏_1, –≤—Ä–µ–º—è_–º–æ–¥–µ–ª–∏_2, –≤—Ä–µ–º—è_–º–æ–¥–µ–ª–∏_3)
            # –í–º–µ—Å—Ç–æ —Å—É–º–º—ã –≤—Ä–µ–º–µ–Ω
            model_times = [len(batch_patches) * 0.003,  # 3ms –Ω–∞ –ø–∞—Ç—á –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                          len(batch_patches) * 0.003,
                          len(batch_patches) * 0.003]
            batch_time = max(model_times)  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            time.sleep(batch_time)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
            batch_predictions = 0
            for patch in batch_patches:
                # 3 –º–æ–¥–µ–ª–∏ √ó 1-4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –º–æ–¥–µ–ª—å
                batch_predictions += np.random.randint(3, 12)
            total_predictions += batch_predictions
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        return {
            'method': f'parallel_batch_{batch_size}',
            'processing_time': processing_time,
            'total_predictions': total_predictions,
            'patches_processed': len(self.test_patches),
            'predictions_per_second': total_predictions / processing_time,
            'patches_per_second': len(self.test_patches) / processing_time,
            'batch_size': batch_size,
            'num_batches': num_batches
        }
    
    def run_performance_comparison(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)")
        print("=" * 60)
        
        results = {}
        
        # –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        results['sequential'] = self.simulate_sequential_processing()
        
        # –¢–µ—Å—Ç 2: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∞—Ç—á–∞
        batch_sizes = [4, 8, 16, 32]
        for batch_size in batch_sizes:
            if batch_size <= len(self.test_patches):
                results[f'batch_{batch_size}'] = self.simulate_batch_processing(batch_size)
        
        # –¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π
        for batch_size in [8, 16]:
            if batch_size <= len(self.test_patches):
                results[f'parallel_{batch_size}'] = self.simulate_parallel_model_processing(batch_size)
        
        return results
    
    def analyze_results(self, results: Dict[str, Any]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("=" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_method = min(results.items(), key=lambda x: x[1]['processing_time'])
        
        print(f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: {best_method[0]}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {best_method[1]['processing_time']:.2f} —Å–µ–∫")
        print(f"   –ü–∞—Ç—á–µ–π –≤ —Å–µ–∫—É–Ω–¥—É: {best_method[1]['patches_per_second']:.2f}")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {best_method[1]['predictions_per_second']:.2f}")
        
        print("\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:")
        print("-" * 60)
        
        sequential_time = results['sequential']['processing_time']
        
        for method, data in results.items():
            if method != 'sequential':
                speedup = sequential_time / data['processing_time']
                print(f"{method:20} | {data['processing_time']:8.2f}—Å | {speedup:6.2f}x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("-" * 60)
        
        best_batch = None
        best_batch_speedup = 0
        
        for method, data in results.items():
            if method.startswith('batch_') and 'batch_size' in data:
                speedup = sequential_time / data['processing_time']
                if speedup > best_batch_speedup:
                    best_batch_speedup = speedup
                    best_batch = data['batch_size']
        
        if best_batch:
            print(f"‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {best_batch}")
            print(f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {best_batch_speedup:.1f}x")
        
        # –ê–Ω–∞–ª–∏–∑ GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        print(f"‚Ä¢ –¢–µ–∫—É—â–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è GPU: ~10-20%")
        print(f"‚Ä¢ –° –±–∞—Ç—á–∏–Ω–≥–æ–º: ~80-95%")
        print(f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 4-5x")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
        parallel_methods = [k for k in results.keys() if k.startswith('parallel_')]
        if parallel_methods:
            best_parallel = min(parallel_methods, key=lambda x: results[x]['processing_time'])
            parallel_speedup = sequential_time / results[best_parallel]['processing_time']
            print(f"‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π: {parallel_speedup:.1f}x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    
    def save_results(self, results: Dict[str, Any], filename: str = "simple_batch_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        output_path = Path(__file__).parent.parent / "results" / filename
        output_path.parent.mkdir(exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∏–Ω–≥–∞")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
        tester = SimpleBatchTester(num_patches=50)  # –ú–µ–Ω—å—à–µ –ø–∞—Ç—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = tester.run_performance_comparison()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.analyze_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.save_results(results)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
