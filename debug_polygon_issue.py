#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–≥—Ä–æ–º–Ω—ã–º –ø–æ–ª–∏–≥–æ–Ω–æ–º –∫–ª–∞—Å—Å–∞ excl
"""

import json
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from shapely.ops import unary_union

def analyze_polygon_issue(json_file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–∏–≥–æ–Ω–æ–º –≤ JSON —Ñ–∞–π–ª–µ"""
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {json_file_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
    with open(json_file_path, 'r') as f:
        data = json.load(f)
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {data['statistics']['total']}")
    print(f"   –ö–ª–∞—Å—Å—ã: {data['statistics']['by_class']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['statistics']['average_confidence']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = data['predictions']
    
    for i, pred in enumerate(predictions):
        print(f"\nüéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {i+1}:")
        print(f"   –ö–ª–∞—Å—Å: {pred['class_name']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['confidence']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º bbox
        box = pred['box']
        width = box['end']['x'] - box['start']['x']
        height = box['end']['y'] - box['start']['y']
        print(f"   Bbox: {width:.1f} x {height:.1f} (–ø–ª–æ—â–∞–¥—å: {width*height:.1f})")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω
        polygon = pred['polygon']
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞: {len(polygon)}")
        
        if len(polygon) > 1000:
            print(f"   ‚ö†Ô∏è  –û–ì–†–û–ú–ù–´–ô –ü–û–õ–ò–ì–û–ù! {len(polygon)} —Ç–æ—á–µ–∫")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x_coords = [p['x'] for p in polygon]
            y_coords = [p['y'] for p in polygon]
            
            print(f"   X –¥–∏–∞–ø–∞–∑–æ–Ω: {min(x_coords):.1f} - {max(x_coords):.1f}")
            print(f"   Y –¥–∏–∞–ø–∞–∑–æ–Ω: {min(y_coords):.1f} - {max(y_coords):.1f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_points = set((x, y) for x, y in zip(x_coords, y_coords))
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(unique_points)} –∏–∑ {len(polygon)}")
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            print(f"   –ü–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫:")
            for j in range(min(10, len(polygon))):
                print(f"     {j}: ({polygon[j]['x']:.1f}, {polygon[j]['y']:.1f})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if len(polygon) > 100:
                # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                pattern_found = False
                for pattern_len in [10, 20, 50, 100]:
                    if len(polygon) > pattern_len * 2:
                        first_pattern = polygon[:pattern_len]
                        second_pattern = polygon[pattern_len:pattern_len*2]
                        if first_pattern == second_pattern:
                            print(f"   üîÑ –ù–∞–π–¥–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª–∏–Ω–æ–π {pattern_len}")
                            pattern_found = True
                            break
                
                if not pattern_found:
                    print(f"   ‚ùì –ù–µ—Ç –æ—á–µ–≤–∏–¥–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
            try:
                coords = [(p['x'], p['y']) for p in polygon]
                shapely_poly = Polygon(coords)
                
                if shapely_poly.is_valid:
                    print(f"   ‚úÖ –ü–æ–ª–∏–≥–æ–Ω –≤–∞–ª–∏–¥–µ–Ω")
                    print(f"   –ü–ª–æ—â–∞–¥—å: {shapely_poly.area:.1f}")
                    print(f"   –ü–µ—Ä–∏–º–µ—Ç—Ä: {shapely_poly.length:.1f}")
                else:
                    print(f"   ‚ùå –ü–æ–ª–∏–≥–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {shapely_poly.validity_reason}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Shapely –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
    
    return data

def check_polygon_merger_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É PolygonMerger"""
    
    print(f"\nüîß –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ PolygonMerger:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    test_polygons = [
        Polygon([(0, 0), (10, 0), (10, 10), (0, 10)]),
        Polygon([(5, 5), (15, 5), (15, 15), (5, 15)]),
        Polygon([(20, 20), (30, 20), (30, 30), (20, 30)])
    ]
    
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã: {len(test_polygons)}")
    for i, poly in enumerate(test_polygons):
        print(f"     –ü–æ–ª–∏–≥–æ–Ω {i+1}: –ø–ª–æ—â–∞–¥—å={poly.area:.1f}, –ø–µ—Ä–∏–º–µ—Ç—Ä={poly.length:.1f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º unary_union
    try:
        merged = unary_union(test_polygons)
        print(f"   ‚úÖ unary_union —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(merged)}")
        if hasattr(merged, 'area'):
            print(f"   –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ: {merged.area:.1f}")
        if hasattr(merged, 'length'):
            print(f"   –ü–µ—Ä–∏–º–µ—Ç—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ: {merged.length:.1f}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ unary_union: {e}")

def create_visualization(json_file_path):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª–∏–≥–æ–Ω–∞"""
    
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    with open(json_file_path, 'r') as f:
        data = json.load(f)
    
    predictions = data['predictions']
    
    for i, pred in enumerate(predictions):
        if len(pred['polygon']) > 1000:
            print(f"   –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {i+1}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x_coords = [p['x'] for p in pred['polygon']]
            y_coords = [p['y'] for p in pred['polygon']]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            plt.figure(figsize=(12, 8))
            plt.plot(x_coords, y_coords, 'b-', linewidth=0.5, alpha=0.7)
            plt.scatter(x_coords[::100], y_coords[::100], c='red', s=1, alpha=0.5)
            plt.title(f'–ü–æ–ª–∏–≥–æ–Ω –∫–ª–∞—Å—Å–∞ {pred["class_name"]} ({len(pred["polygon"])} —Ç–æ—á–µ–∫)')
            plt.xlabel('X')
            plt.ylabel('Y')
            plt.grid(True, alpha=0.3)
            plt.axis('equal')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            output_path = f"polygon_visualization_{i+1}.png"
            plt.savefig(output_path, dpi=150, bbox_inches='tight')
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            plt.close()

if __name__ == "__main__":
    json_file = "/mnt/ai/cnn/wsiyolo/results/19_ibd_mod_S037__20240822_091343.json"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
    data = analyze_polygon_issue(json_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –º–µ—Ä–∂–µ—Ä–∞
    check_polygon_merger_logic()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_visualization(json_file)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

