#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –±–∏–æ–ø—Ç–∞—Ç–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–æ–ø—Ç–∞—Ç–∞
"""

import json
import math
from PIL import Image, ImageDraw, ImageFont
import numpy as np

def create_numbered_biopsy_grid(analysis_file="simple_biopsy_analysis.json"):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É –±–∏–æ–ø—Ç–∞—Ç–æ–≤"""
    
    print("üî¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ –±–∏–æ–ø—Ç–∞—Ç–æ–≤")
    print("=" * 60)
    
    try:
        with open(analysis_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        biopsy_regions = data['simple_biopsy_analysis']['biopsy_regions']
        grid_params = data['simple_biopsy_analysis']['grid_parameters']
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(biopsy_regions)} –±–∏–æ–ø—Ç–∞—Ç–æ–≤")
        print(f"üìê –°–µ—Ç–∫–∞: {grid_params['step_x']}x{grid_params['step_y']}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–æ–ø—Ç–∞—Ç—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        distances = []
        for region in biopsy_regions:
            center_x = (region['x_min'] + region['x_max']) / 2
            center_y = (region['y_min'] + region['y_max']) / 2
            distance = math.sqrt(center_x**2 + center_y**2)
            
            distances.append({
                'id': region['id'],
                'name': region['name'],
                'center': (center_x, center_y),
                'distance': distance,
                'region': region
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç = 1)
        distances.sort(key=lambda x: x['distance'])
        
        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        numbered_biopsies = []
        for i, biopsy in enumerate(distances):
            new_id = i + 1
            numbered_biopsy = {
                'grid_id': new_id,  # –ù–æ–≤—ã–π ID –≤ —Å–µ—Ç–∫–µ
                'original_id': biopsy['id'],  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
                'name': f"–ë–∏–æ–ø—Ç–∞—Ç {new_id} (—Å–µ—Ç–∫–∞)",
                'center': biopsy['center'],
                'distance': biopsy['distance'],
                'region': biopsy['region'],
                'grid_position': f"({i//3 + 1}, {i%3 + 1})" if len(distances) <= 6 else f"({i//2 + 1}, {i%2 + 1})"
            }
            numbered_biopsies.append(numbered_biopsy)
        
        print(f"\nüî¢ –ü–†–û–ù–£–ú–ï–†–û–í–ê–ù–ù–ê–Ø –°–ï–¢–ö–ê –ë–ò–û–ü–¢–ê–¢–û–í:")
        print("=" * 50)
        for biopsy in numbered_biopsies:
            print(f"   {biopsy['grid_id']}. {biopsy['name']} (–æ—Ä–∏–≥. ID {biopsy['original_id']})")
            print(f"      –ü–æ–∑–∏—Ü–∏—è –≤ —Å–µ—Ç–∫–µ: {biopsy['grid_position']}")
            print(f"      –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç (0,0): {biopsy['distance']:,.0f} –ø–∏–∫—Å–µ–ª–µ–π")
            print(f"      –¶–µ–Ω—Ç—Ä: ({biopsy['center'][0]:,.0f}, {biopsy['center'][1]:,.0f})")
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({biopsy['region']['x_min']:,}, {biopsy['region']['y_min']:,}) - ({biopsy['region']['x_max']:,}, {biopsy['region']['y_max']:,})")
            print()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏–æ–ø—Ç–∞—Ç–∞
        grid_config = {
            "biopsy_grid": {
                "total_biopsies": len(numbered_biopsies),
                "grid_step_x": grid_params['step_x'],
                "grid_step_y": grid_params['step_y'],
                "numbered_biopsies": numbered_biopsies
            },
            "selection_options": {
                "closest_to_origin": 1,  # ID –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                "available_ids": list(range(1, len(numbered_biopsies) + 1)),
                "default_selection": 1
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("biopsy_grid_config.json", 'w', encoding='utf-8') as f:
            json.dump(grid_config, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: biopsy_grid_config.json")
        
        return grid_config
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {analysis_file}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_grid_visualization(analysis_file="simple_biopsy_analysis.json"):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏"""
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏...")
    
    try:
        with open(analysis_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        biopsy_regions = data['simple_biopsy_analysis']['biopsy_regions']
        grid_params = data['simple_biopsy_analysis']['grid_parameters']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
        img = Image.open("wsi_thumbnail.jpg")
        vis_img = img.copy()
        draw = ImageDraw.Draw(vis_img)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        scale_x = 136192 / vis_img.width
        scale_y = 77312 / vis_img.height
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–æ–ø—Ç–∞—Ç—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        distances = []
        for region in biopsy_regions:
            center_x = (region['x_min'] + region['x_max']) / 2
            center_y = (region['y_min'] + region['y_max']) / 2
            distance = math.sqrt(center_x**2 + center_y**2)
            distances.append((distance, region))
        
        distances.sort(key=lambda x: x[0])
        
        # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
        grid_step_x = int(grid_params['step_x'] / scale_x)
        grid_step_y = int(grid_params['step_y'] / scale_y)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for x in range(0, vis_img.width, grid_step_x):
            draw.line([(x, 0), (x, vis_img.height)], fill='blue', width=1)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for y in range(0, vis_img.height, grid_step_y):
            draw.line([(0, y), (vis_img.width, y)], fill='blue', width=1)
        
        # –†–∏—Å—É–µ–º –±–∏–æ–ø—Ç–∞—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏
        colors = ['red', 'green', 'orange', 'purple', 'brown', 'pink']
        for i, (distance, region) in enumerate(distances):
            color = colors[i % len(colors)]
            grid_id = i + 1
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            x_min = int(region['x_min'] / scale_x)
            y_min = int(region['y_min'] / scale_y)
            x_max = int(region['x_max'] / scale_x)
            y_max = int(region['y_max'] / scale_y)
            
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            draw.rectangle([x_min, y_min, x_max, y_max], outline=color, width=3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –±–∏–æ–ø—Ç–∞—Ç–∞
            try:
                font = ImageFont.load_default()
                # –ù–æ–º–µ—Ä –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
                draw.text((x_min + 5, y_min + 5), f"#{grid_id}", fill=color, font=font)
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                draw.text((x_min + 5, y_min + 25), f"d={distance:,.0f}", fill=color, font=font)
            except:
                draw.text((x_min + 5, y_min + 5), f"#{grid_id}", fill=color)
                draw.text((x_min + 5, y_min + 25), f"d={distance:,.0f}", fill=color)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        vis_img.save("wsi_numbered_grid.jpg")
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: wsi_numbered_grid.jpg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏
    grid_config = create_numbered_biopsy_grid()
    
    if grid_config:
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        create_grid_visualization()
        
        print(f"\nüéØ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("=" * 40)
        print("1. üî¢ –ë–∏–æ–ø—Ç–∞—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 1 –¥–æ 6")
        print("2. üìç –ù–æ–º–µ—Ä 1 = –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        print("3. üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á --biopsy-id N –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏–æ–ø—Ç–∞—Ç–∞")
        print("4. üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ biopsy_grid_config.json")
        print("5. üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ wsi_numbered_grid.jpg")

if __name__ == "__main__":
    main()
