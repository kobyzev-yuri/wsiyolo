#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ WSI –∏ –º–µ—Ç–∫–∞–º
"""

import json
import sys
from pathlib import Path


def view_statistics(results_dir: str = "results"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º WSI
    
    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ WSI –∏ –º–µ—Ç–∫–∞–º")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–¥–∫—É
    summary_file = Path(results_dir) / "processing_summary.json"
    
    if not summary_file.exists():
        print(f"‚ùå –§–∞–π–ª —Å–≤–æ–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {summary_file}")
        return False
    
    try:
        with open(summary_file, 'r', encoding='utf-8') as f:
            summary = json.load(f)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É WSI
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ WSI: {len(summary)}")
        
        total_predictions = 0
        all_labels = {}
        
        for wsi_name, data in summary.items():
            if wsi_name.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                continue
                
            print(f"\nüîç {wsi_name}:")
            print(f"   –§–∞–π–ª: {data['file']}")
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {data['predictions_count']}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['avg_confidence']:.3f}")
            print(f"   üìä –ü–æ –º–µ—Ç–∫–∞–º:")
            
            for label, count in data['label_statistics'].items():
                print(f"      {label}: {count}")
                all_labels[label] = all_labels.get(label, 0) + count
            
            total_predictions += data['predictions_count']
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ WSI: {len(summary)}")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_predictions}")
        print(f"   üìä –í—Å–µ –º–µ—Ç–∫–∏:")
        for label, count in sorted(all_labels.items()):
            print(f"      {label}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def view_wsi_details(wsi_name: str, results_dir: str = "results"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É WSI
    
    Args:
        wsi_name: –ò–º—è WSI —Ñ–∞–π–ª–∞
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    
    wsi_file = Path(results_dir) / f"{wsi_name}.json"
    
    if not wsi_file.exists():
        print(f"‚ùå –§–∞–π–ª WSI –Ω–µ –Ω–∞–π–¥–µ–Ω: {wsi_file}")
        return False
    
    try:
        with open(wsi_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üîç –î–µ—Ç–∞–ª–∏ WSI: {wsi_name}")
        print("=" * 50)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WSI
        wsi_info = data['wsi_info']
        print(f"üìÅ –§–∞–π–ª: {wsi_info['file']}")
        print(f"üìÅ –ü—É—Ç—å: {wsi_info['path']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        proc_info = data['processing_info']
        print(f"\nüîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   –ú–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {proc_info['models_used']}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ç—á–µ–π: {proc_info['max_patches']}")
        print(f"   –†–∞–∑–º–µ—Ä –ø–∞—Ç—á–∞: {proc_info['tile_size']}")
        print(f"   –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {proc_info['overlap_ratio']*100:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = data['statistics']
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['total']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['average_confidence']:.3f}")
        print(f"   üìä –ü–æ –º–µ—Ç–∫–∞–º:")
        for label, count in stats['by_class'].items():
            print(f"      {label}: {count}")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = data['predictions']
        print(f"\nüéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ({len(predictions)}):")
        for i, pred in enumerate(predictions, 1):
            print(f"   {i}. {pred['class_name']} (conf: {pred['confidence']:.3f})")
            box = pred['box']
            print(f"      Box: ({box['start']['x']:.1f}, {box['start']['y']:.1f}) - ({box['end']['x']:.1f}, {box['end']['y']:.1f})")
            if 'polygon' in pred and pred['polygon']:
                print(f"      –ü–æ–ª–∏–≥–æ–Ω: {len(pred['polygon'])} —Ç–æ—á–µ–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π WSI: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) > 1:
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WSI
        wsi_name = sys.argv[1]
        success = view_wsi_details(wsi_name)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        success = view_statistics()
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)


