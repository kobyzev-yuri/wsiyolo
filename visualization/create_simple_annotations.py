#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –±–µ–∑ openslide
"""

import json
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def load_predictions(json_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ JSON"""
    with open(json_path, 'r') as f:
        data = json.load(f)
    return data

def get_class_colors():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    classes = [
        'Crypts', 'Muscularis mucosae', 'Surface epithelium', 
        'moderate_segmentation', 'Mild', 'excl'
    ]
    
    colors = [
        '#FF6B6B',  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è Crypts
        '#4ECDC4',  # –ë–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è Muscularis mucosae
        '#45B7D1',  # –°–∏–Ω–∏–π –¥–ª—è Surface epithelium
        '#96CEB4',  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è moderate_segmentation
        '#FFEAA7',  # –ñ–µ–ª—Ç—ã–π –¥–ª—è Mild
        '#DDA0DD'   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è excl
    ]
    
    return dict(zip(classes, colors))

def create_prediction_visualization(predictions, output_dir="prediction_visualizations", max_predictions=100):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    data = load_predictions(json_path)
    predictions = data['predictions']
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ excl
    useful_predictions = [p for p in predictions if p['class_name'] != 'excl']
    print(f"   –ü–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–±–µ–∑ excl): {len(useful_predictions)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ç—á–∞–º 512x512
    patch_groups = {}
    for pred in useful_predictions:
        x = pred['box']['start']['x']
        y = pred['box']['start']['y']
        patch_x = (x // 512) * 512
        patch_y = (y // 512) * 512
        patch_key = (patch_x, patch_y)
        
        if patch_key not in patch_groups:
            patch_groups[patch_key] = []
        patch_groups[patch_key].append(pred)
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—á–µ–π —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏: {len(patch_groups)}")
    
    # –ë–µ—Ä–µ–º –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ (0-20000 –ø–æ X –∏ Y)
    target_patches = {}
    
    for (patch_x, patch_y), patch_preds in patch_groups.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ç—á –≤ —Ü–µ–ª–µ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏ (0-20000)
        if patch_x < 20000 and patch_y < 20000:
            target_patches[(patch_x, patch_y)] = patch_preds
    
    print(f"   –ü–∞—Ç—á–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ 0-20000: {len(target_patches)}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    selected_patches = list(target_patches.items())[:max_predictions]
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
    class_colors = get_class_colors()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    fig, ax = plt.subplots(1, 1, figsize=(20, 15))
    
    # –†–∏—Å—É–µ–º –ø–∞—Ç—á–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    legend_elements = []
    class_counts = {}
    
    for (patch_x, patch_y), patch_predictions in selected_patches:
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–∞—Ç—á–∞ 512x512
        patch_rect = patches.Rectangle((patch_x, patch_y), 512, 512, 
                                     linewidth=2, edgecolor='black', facecolor='none', alpha=0.5)
        ax.add_patch(patch_rect)
        
        # –†–∏—Å—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ç—á–∞
        for pred in patch_predictions:
            class_name = pred['class_name']
            confidence = pred['confidence']
            box = pred['box']
            polygon = pred.get('polygon', [])
            
            color = class_colors.get(class_name, '#000000')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
            if class_name not in class_counts:
                class_counts[class_name] = 0
            class_counts[class_name] += 1
            
            # –†–∏—Å—É–µ–º bounding box
            x1, y1 = box['start']['x'], box['start']['y']
            x2, y2 = box['end']['x'], box['end']['y']
            width, height = x2 - x1, y2 - y1
            
            rect = patches.Rectangle((x1, y1), width, height, 
                                   linewidth=1, edgecolor=color, facecolor='none', alpha=0.8)
            ax.add_patch(rect)
            
            # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if polygon and len(polygon) >= 3:
                poly_coords = [[point['x'], point['y']] for point in polygon]
                poly = patches.Polygon(poly_coords, linewidth=1, 
                                     edgecolor=color, facecolor=color, alpha=0.3)
                ax.add_patch(poly)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—å - –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ (0-20000)
    ax.set_xlim(0, 20000)  # –û–±–ª–∞—Å—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    ax.set_ylim(0, 20000)   # –û–±–ª–∞—Å—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    ax.set_aspect('equal')
    ax.set_title(f'–ü–∞—Ç—á–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ (–æ–±–ª–∞—Å—Ç—å 0-20000): {len(selected_patches)} –ø–∞—Ç—á–µ–π', fontsize=16)
    ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax.grid(True, alpha=0.3)
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
    for class_name, count in class_counts.items():
        color = class_colors.get(class_name, '#000000')
        legend_elements.append(patches.Patch(color=color, label=f'{class_name} ({count})'))
    
    ax.legend(handles=legend_elements, loc='upper right', fontsize=10)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_file = output_path / "all_predictions_overview.png"
    plt.savefig(output_file, dpi=150, bbox_inches='tight')
    plt.close(fig)
    
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
    
    return output_path

def create_class_statistics(json_path, output_dir="prediction_visualizations"):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º"""
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º...")
    
    data = load_predictions(json_path)
    predictions = data['predictions']
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_counts = {}
    class_confidences = {}
    class_areas = {}
    
    for pred in predictions:
        class_name = pred['class_name']
        confidence = pred['confidence']
        box = pred['box']
        
        # –ü–ª–æ—â–∞–¥—å bbox
        width = box['end']['x'] - box['start']['x']
        height = box['end']['y'] - box['start']['y']
        area = width * height
        
        if class_name not in class_counts:
            class_counts[class_name] = 0
            class_confidences[class_name] = []
            class_areas[class_name] = []
        
        class_counts[class_name] += 1
        class_confidences[class_name].append(confidence)
        class_areas[class_name].append(area)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 15))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º
    classes = list(class_counts.keys())
    counts = list(class_counts.values())
    colors = [get_class_colors().get(cls, '#000000') for cls in classes]
    
    bars = ax1.bar(classes, counts, color=colors, alpha=0.7)
    ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax1.tick_params(axis='x', rotation=45)
    
    for bar, count in zip(bars, counts):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                str(count), ha='center', va='bottom')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    for class_name, confidences in class_confidences.items():
        ax2.hist(confidences, alpha=0.6, label=class_name, 
                color=get_class_colors().get(class_name, '#000000'), bins=20)
    
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º')
    ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
    ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π
    for class_name, areas in class_areas.items():
        ax3.hist(areas, alpha=0.6, label=class_name, 
                color=get_class_colors().get(class_name, '#000000'), bins=20)
    
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
    ax3.set_xlabel('–ü–ª–æ—â–∞–¥—å (–ø–∏–∫—Å–µ–ª–∏¬≤)')
    ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mean_confidences = [np.mean(class_confidences[cls]) for cls in classes]
    mean_areas = [np.mean(class_areas[cls]) for cls in classes]
    
    ax4.scatter(mean_areas, mean_confidences, c=colors, s=100, alpha=0.7)
    ax4.set_title('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å vs –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å')
    ax4.set_xlabel('–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å')
    ax4.set_ylabel('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
    ax4.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    for i, cls in enumerate(classes):
        ax4.annotate(cls, (mean_areas[i], mean_confidences[i]), 
                    xytext=(5, 5), textcoords='offset points', fontsize=8)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    stats_file = output_path / "class_statistics.png"
    plt.savefig(stats_file, dpi=150, bbox_inches='tight')
    plt.close(fig)
    
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_file}")
    
    return stats_file

if __name__ == "__main__":
    json_path = "results/predictions.json"
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    output_dir = create_prediction_visualization(json_path, max_predictions=500)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    create_class_statistics(json_path, str(output_dir))
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
